{
  "className": "qx.test.io.MAssert",
  "packageName": "qx.test.io",
  "name": "MAssert",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 46,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Mixin containing special assert methods</p>"
        }
      ]
    }
  },
  "type": "mixin",
  "members": {
    "assertDeepEquals": {
      "location": {
        "start": {
          "line": 24,
          "column": 4
        },
        "end": {
          "line": 29,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deep equal comparison, using Sinon's <code>deepEqual</code> comparison.\n Two values are \"deep equal\" if:</p>\n<ul>\n<li>They are equal, according to samsam.identical\n(https://sinonjs.github.io/samsam/)</li>\n<li>They are both date objects representing the same time</li>\n<li>They are both arrays containing elements that are all deepEqual</li>\n<li>They are objects with the same set of properties, and each property\n in obj1 is deepEqual to the corresponding property in obj2\nSupports cyclic objects.</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} expected"
          },
          {
            "name": "@param",
            "body": "{*} actual"
          },
          {
            "name": "@param",
            "body": "{String?} msg"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "assertContains": {
      "location": {
        "start": {
          "line": 37,
          "column": 4
        },
        "end": {
          "line": 44,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that a string fragment is contained in a result</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} expectedFragment"
          },
          {
            "name": "@param",
            "body": "{String} actual"
          },
          {
            "name": "@param",
            "body": "{String?} msg"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}