{
  "className": "qx.test.Promise",
  "packageName": "qx.test",
  "name": "Promise",
  "superClass": "qx.dev.unit.TestCase",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 897,
        "column": 3
      }
    }
  },
  "type": "class",
  "members": {
    "testNewPromise": {
      "location": {
        "start": {
          "line": 8,
          "column": 4
        },
        "end": {
          "line": 28,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests a new promise that resolves with no errors</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testReject": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests a new promise that is rejected</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testCatchFinally": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "testAllOf": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests the qx.Promise.allOf method</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testPropertySetValueAsPromise1": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests that setting a property value with a promise will delay setting the\n value until the promise is resolved.  In this case, the property is <em>not</em>\n marked as async and the setXxx method is used</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testPropertySetValueAsPromise2": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests that setting a property value with a promise will delay setting the\n value until the promise is resolved.  In this case, the property <em>is</em>\n marked as async and the setXxxAsync method is used to test chaining</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testPropertySetValueAsyncApply1": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests that a property apply method can return a promise; in this case, the\n property is not marked as async so the apply method is only able to delay\n the event handler</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testPropertySetValueAsyncApply2": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests that a property apply method can return a promise; in this case, the\n property <em>is</em> marked as async, and we use the setAlphaAsync to test chaining</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testPropertySetValueAsyncApply3": {
      "location": {
        "start": {
          "line": 274,
          "column": 4
        },
        "end": {
          "line": 292,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests that a property apply method can take a promise</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testBinding": {
      "location": {
        "start": {
          "line": 294,
          "column": 4
        },
        "end": {
          "line": 433,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "testAsyncEventHandlers": {
      "location": {
        "start": {
          "line": 440,
          "column": 4
        },
        "end": {
          "line": 545,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests event handlers bound to the \"changeXxxAsync\" events, and which return\n a promise.  Event handlers must be triggered in sequence and by returning\n a promise will defer subsequent event handlers from firing</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testWaterfallBinding": {
      "location": {
        "start": {
          "line": 553,
          "column": 4
        },
        "end": {
          "line": 647,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests using bind() on async properties (using the \"changeXxxAsync\" events) between\n a series of objects.  The test must show that the property values are fired in\n order, and that if an async event handler returns a promise it defers bind from\n propagating onto other objects.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testEach1": {
      "location": {
        "start": {
          "line": 653,
          "column": 4
        },
        "end": {
          "line": 670,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests the each method of promise, using qx.data.Array which the Bluebird implementation\n does not understand.  The values are scalar values</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testEach2": {
      "location": {
        "start": {
          "line": 676,
          "column": 4
        },
        "end": {
          "line": 718,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests the each method of promise, using qx.data.Array which the Bluebird implementation\n does not understand.  The values are a mixture of promises and scalar values</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testGlobalError": {
      "location": {
        "start": {
          "line": 723,
          "column": 4
        },
        "end": {
          "line": 739,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests unhandled rejections being passed to the global error handler</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testMethod": {
      "location": {
        "start": {
          "line": 744,
          "column": 4
        },
        "end": {
          "line": 756,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests promisification of methods</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testBinding1": {
      "location": {
        "start": {
          "line": 761,
          "column": 4
        },
        "end": {
          "line": 769,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests binding of all callbacks via .bind()</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testBinding2": {
      "location": {
        "start": {
          "line": 774,
          "column": 4
        },
        "end": {
          "line": 787,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests binding on a per-method basis</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testMarshal": {
      "location": {
        "start": {
          "line": 789,
          "column": 4
        },
        "end": {
          "line": 793,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "testBindingToStatic": {
      "location": {
        "start": {
          "line": 798,
          "column": 4
        },
        "end": {
          "line": 805,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests binding where the context is static class</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testBindingResolve": {
      "location": {
        "start": {
          "line": 810,
          "column": 4
        },
        "end": {
          "line": 817,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests the context parameter for qx.Promise.resolve</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testBindingReject": {
      "location": {
        "start": {
          "line": 822,
          "column": 4
        },
        "end": {
          "line": 829,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests the context parameter for qx.Promise.reject</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "testWrapping": {
      "location": {
        "start": {
          "line": 834,
          "column": 4
        },
        "end": {
          "line": 849,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests wrapping of parameters preserves the original values</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTestResult": {
      "type": "function",
      "name": "getTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testResult"
          }
        ]
      }
    },
    "setTestResult": {
      "type": "function",
      "name": "setTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testResult"
          }
        ]
      }
    },
    "resetTestResult": {
      "type": "function",
      "name": "resetTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testResult</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ]
      }
    },
    "getTestFunc": {
      "type": "function",
      "name": "getTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testFunc"
          }
        ]
      }
    },
    "setTestFunc": {
      "type": "function",
      "name": "setTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testFunc"
          }
        ]
      }
    },
    "resetTestFunc": {
      "type": "function",
      "name": "resetTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testFunc</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ]
      }
    }
  },
  "statics": {
    "TEST_MODEL": {
      "location": {
        "start": {
          "line": 853,
          "column": 4
        },
        "end": {
          "line": 895,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    }
  },
  "events": {},
  "descendants": []
}