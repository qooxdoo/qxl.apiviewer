{
  "className": "qx.tool.compiler.resources.Manager",
  "packageName": "qx.tool.compiler.resources",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 33,
        "column": 0
      },
      "end": {
        "line": 456,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Analyses library resources, collecting information into a cached database\n file</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 41,
        "column": 13
      },
      "end": {
        "line": 53,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "analyser {qx.tool.compiler.Analyser}"
        }
      ]
    }
  },
  "members": {
    "__dbFilename": {
      "location": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} filename of database</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__db": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 14
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{Object} Database</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__analyser": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>the used analyser</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__librariesByResourceUri": {
      "location": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{Map{String,Library}} Lookup of libraries, indexed by resource URI</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__allResourceUris": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String[]} Array of all resource URIs, sorted alphabetically (ie these are the keys in __librariesByResourceUri)</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__loaders": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{ResourceLoader[]} list of resource loaders, used to add info to the database</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__converters": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{ResourceConverter[]} list of resource converters, used to copy resources to the target</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "loadDatabase": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads the cached database</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "saveDatabase": {
      "location": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Saves the database</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDatabase": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the loaded database</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "findLibraryForResource": {
      "location": {
        "start": {
          "line": 108,
          "column": 4
        },
        "end": {
          "line": 118,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the library needed for a resource, see <code>findLibrariesForResource</code>.  This reports\n an error if more than one library is found.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uri {String} URI",
            "paramName": "uri",
            "description": " URI",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Library[]} the libraries, empty list if not found",
            "type": "Library[]",
            "description": " the libraries, empty list if not found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "findLibrariesForResource": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the libraries needed for a resource; this depends on <code>findAllResources</code> having\n already been called.  <code>uri</code> can include optional explicit namespace (eg \"qx:blah/blah.png\"),\n otherwise the library resource lookups are examined to find the library.\n Note that there can be more than one directory because the lookup holds directory names (used\n for wildcards) and they are allowed to be duplicated.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uri {String} URI",
            "paramName": "uri",
            "description": " URI",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Library[]} the libraries, empty list if not found",
            "type": "Library[]",
            "description": " the libraries, empty list if not found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "findAllResources": {
      "location": {
        "start": {
          "line": 219,
          "column": 4
        },
        "end": {
          "line": 309,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scans all libraries looking for resources; this does not analyse the\n files, simply compiles the list</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__addAsset": {
      "location": {
        "start": {
          "line": 316,
          "column": 4
        },
        "end": {
          "line": 343,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an asset</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "asset {Asset} the asset to add",
            "paramName": "asset",
            "description": " the asset to add",
            "type": "qx.tool.compiler.resources.Asset"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getAsset": {
      "location": {
        "start": {
          "line": 353,
          "column": 4
        },
        "end": {
          "line": 370,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets an individual asset</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "srcPath {String} the resource name, with or without a namespace prefix",
            "paramName": "srcPath",
            "description": " the resource name, with or without a namespace prefix",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "create {Boolean?} if true the asset will be created if it does not exist",
            "paramName": "create",
            "description": " if true the asset will be created if it does not exist",
            "optional": true,
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "isThemeFile {Boolean?} if true the asset will be expected to be in the theme folder",
            "paramName": "isThemeFile",
            "description": " if true the asset will be expected to be in the theme folder",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Asset?} the asset, if found",
            "type": "Asset?",
            "description": " the asset, if found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAssetsForPaths": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 454,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects information about the assets listed in srcPaths;</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "srcPaths",
            "paramName": "srcPaths",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Asset[]}",
            "type": "Asset[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}