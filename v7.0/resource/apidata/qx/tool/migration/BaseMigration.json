{
  "className": "qx.tool.migration.BaseMigration",
  "packageName": "qx.tool.migration",
  "name": "BaseMigration",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 31,
        "column": 0
      },
      "end": {
        "line": 339,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The base class for migrations, containing useful methods to\n manipulate source files, and to update runtime information\n on the individual migration class. It also holds a reference\n to the runner which contains meta data for all migrations.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 2
      },
      "end": {
        "line": 42,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "{qx.tool.migration.Runner} runner The runner instance",
          "paramName": "runner",
          "description": "The runner instance",
          "type": "qx.tool.migration.Runner"
        }
      ]
    }
  },
  "properties": {
    "runner": {
      "location": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 5
        }
      },
      "name": "runner",
      "propertyType": "new",
      "check": "qx.tool.migration.Runner"
    },
    "applied": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 5
        }
      },
      "name": "applied",
      "propertyType": "new",
      "init": 0,
      "check": "Number",
      "defaultValue": 0
    },
    "pending": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 5
        }
      },
      "name": "pending",
      "propertyType": "new",
      "init": 0,
      "check": "Number",
      "defaultValue": 0
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "getVersion": {
      "location": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the version of qooxdoo this migration applies to.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxVersion": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the qooxdoo version that has been passed to the Runner or the\n one from the environment</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<String>|*}",
            "type": "Promise<String>|*",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "announce": {
      "location": {
        "start": {
          "line": 85,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Output message that announces a migration. What this does is to mark it\n visually</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message",
            "paramName": "message",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "markAsApplied": {
      "location": {
        "start": {
          "line": 96,
          "column": 4
        },
        "end": {
          "line": 108,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks one or more migration steps as applied</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Number|String} param Optional. If number, number of migrations to mark\n as applied, defaults to 1; if String, message to be <code>info()</code>ed if verbose=true",
            "paramName": "param",
            "description": "Optional. If number, number of migrations to mark\n as applied, defaults to 1; if String, message to be <code>info()</code>ed if verbose=true",
            "type": [
              "Number",
              "String"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "markAsPending": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks one or more migration steps as pending</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Number|String} param Optional. If number, number of migrations to mark\n as pending, defaults to 1; if String, message to be <code>announce()</code>ed",
            "paramName": "param",
            "description": "Optional. If number, number of migrations to mark\n as pending, defaults to 1; if String, message to be <code>announce()</code>ed",
            "type": [
              "Number",
              "String"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "renameFilesUnlessDryRun": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rename source files, unless this is a dry run, in which case\n it will only annouce it and mark the migration step as pending.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String[]} fileList Array containing arrays of [new name, old name]",
            "paramName": "fileList",
            "description": "Array containing arrays of [new name, old name]",
            "type": "String[]"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "checkFilesToRename": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an array of [newPath,oldPath], filter by those which exist\n at oldPath and not at newPath</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileList {[]}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<[]>}",
            "type": "Promise<[]>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "checkFilesContain": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the given file or array of files contains a given text</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String|String[]} files"
          },
          {
            "name": "@param",
            "body": "{String} text"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<Boolean>}",
            "type": "Promise<Boolean>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "replaceInFilesUnlessDryRun": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replace text in source files, unless this is a dry run, in which case\n it will only annouce it and mark the migration step as pending.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{files: string, from: string, to: string}[]} replaceInFilesArr\n    Array containing objects compatible with https://github.com/adamreisnz/replace-in-file"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateDependencyUnlessDryRun": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 272,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates a dependency in the given Manifest model, , unless this is a dry run, in which case\n it will only annouce it and mark the migration step as pending.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.tool.config.Manifest} manifestModel"
          },
          {
            "name": "@param",
            "body": "{String} dependencyName The name of the dependency in the `require object",
            "paramName": "dependencyName",
            "description": "The name of the dependency in the `require object",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "{String} semverRange A semver-compatible range string",
            "paramName": "semverRange",
            "description": "A semver-compatible range string",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          },
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateQxDependencyUnlessDryRun": {
      "location": {
        "start": {
          "line": 282,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the <code>@qooxdoo/framework</code> dependency in the given Manifest model, if\n the current qooxdoo version is not covered by it. If this is a dry run, the\n change will only be annouced and the migration step marked as pending.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.tool.config.Manifest} manifestModel"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateSchemaUnlessDryRun": {
      "location": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the json-schema in a configuration file, unless this is a dry run, in which case\n it will only annouce it and mark the migration step as pending.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.tool.config.Abstract} configModel"
          },
          {
            "name": "@param",
            "body": "{String} schemaUri"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "upgradePackagesUnlessDryRun": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 337,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Upgrades the applications's installed packages, unless this is a dry run, in which case\n it will only annouce it and mark the migration step as pending.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<void>}",
            "type": "Promise<void>",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getRunner": {
      "type": "function",
      "name": "getRunner",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>runner</code>.\n\nFor further details take a look at the property definition: {@link #runner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.tool.migration.Runner",
            "desc": "Returns the value for runner"
          }
        ]
      }
    },
    "setRunner": {
      "type": "function",
      "name": "setRunner",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>runner</code>.\n\nFor further details take a look at the property definition: {@link #runner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.tool.migration.Runner",
            "paramName": "value",
            "desc": "Value for runner"
          }
        ]
      }
    },
    "resetRunner": {
      "type": "function",
      "name": "resetRunner",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>runner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #runner}."
          }
        ]
      }
    },
    "getApplied": {
      "type": "function",
      "name": "getApplied",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>applied</code>.\n\nFor further details take a look at the property definition: {@link #applied}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for applied"
          }
        ]
      }
    },
    "setApplied": {
      "type": "function",
      "name": "setApplied",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>applied</code>.\n\nFor further details take a look at the property definition: {@link #applied}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for applied"
          }
        ]
      }
    },
    "resetApplied": {
      "type": "function",
      "name": "resetApplied",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>applied</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #applied}."
          }
        ]
      }
    },
    "getPending": {
      "type": "function",
      "name": "getPending",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>pending</code>.\n\nFor further details take a look at the property definition: {@link #pending}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for pending"
          }
        ]
      }
    },
    "setPending": {
      "type": "function",
      "name": "setPending",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>pending</code>.\n\nFor further details take a look at the property definition: {@link #pending}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for pending"
          }
        ]
      }
    },
    "resetPending": {
      "type": "function",
      "name": "resetPending",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>pending</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #pending}."
          }
        ]
      }
    }
  },
  "descendants": [
    "qx.tool.migration.M6_0_0",
    "qx.tool.migration.M7_0_0"
  ]
}