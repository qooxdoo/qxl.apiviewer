{
  "className": "qx.tool.utils.files.Utils",
  "packageName": "qx.tool.utils.files",
  "name": "Utils",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 33,
        "column": 0
      },
      "end": {
        "line": 328,
        "column": 3
      }
    }
  },
  "type": "class",
  "statics": {
    "findAllFiles": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "sync": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronises two files or folders; files are copied from/to but only if their\n modification time or size has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {String} path to copy from",
            "paramName": "from",
            "description": " path to copy from",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "to {String} path to copy to",
            "paramName": "to",
            "description": " path to copy to",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "filter {Function?} optional filter method to validate filenames before sync",
            "paramName": "filter",
            "description": " optional filter method to validate filenames before sync",
            "optional": true,
            "type": "Function"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copyFile": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Copies a file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {String} path to copy from",
            "paramName": "from",
            "description": " path to copy from",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "to {String} path to copy to",
            "paramName": "to",
            "description": " path to copy to",
            "type": "String"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "safeStat": {
      "location": {
        "start": {
          "line": 144,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the stats for a file, or null if the file does not exist</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filename",
            "paramName": "filename",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{fs.Stat}",
            "type": "fs.Stat",
            "description": ""
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "safeUnlink": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deletes a file, does nothing if the file does not exist</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filename {String} file to delete",
            "paramName": "filename",
            "description": " file to delete",
            "type": "String"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "safeRename": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Renames a file, does nothing if the file does not exist</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {String} file to rename",
            "paramName": "from",
            "description": " file to rename",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "to {String} new filename",
            "paramName": "to",
            "description": " new filename",
            "type": "String"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "rotateUnique": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rotates files so that this file does not exist, by renaming the existing file to have a \".1\"\n appended, and the \".1\" to be renamed to \".2\" etc, up to <code>length</code> versions</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filename {String} filename to rotate",
            "paramName": "filename",
            "description": " filename to rotate",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "length {Integer} maximum number of files",
            "paramName": "length",
            "description": " maximum number of files",
            "type": "Integer"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deleteRecursive": {
      "location": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 232,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deletes a file or directory; directories are recursively removed</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} file or dir to delete",
            "paramName": "name",
            "description": " file or dir to delete",
            "type": "String"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "correctCase": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Normalises the path and corrects the case of the path to match what is actually on the filing system</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dir {String} the filename to normalise",
            "paramName": "dir",
            "description": " the filename to normalise",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the new path",
            "type": "String",
            "description": " the new path"
          }
        ],
        "@async": [
          {
            "name": "@async",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}