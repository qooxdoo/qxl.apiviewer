{
  "className": "qx.tool.compiler.targets.meta.Package",
  "packageName": "qx.tool.compiler.targets.meta",
  "name": "Package",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 297,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A Package is a collection of files and resources, used by either the boot process\n or by one or more Parts</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 36,
        "column": 2
      },
      "end": {
        "line": 49,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ]
    }
  },
  "properties": {
    "embedAllJavascript": {
      "location": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to embed all the javascript into the one, main package .js file</p>"
          }
        ]
      },
      "name": "embedAllJavascript",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "needsWriteToDisk": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If true, this is generated on the fly and needs to be output</p>"
          }
        ]
      },
      "name": "needsWriteToDisk",
      "propertyType": "new",
      "apply": "_applyNeedsWriteToDisk",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__appMeta": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{AppMeta} the AppMeta instance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__packageIndex": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} the package index, 0 == boot package"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__assets": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.tool.compiler.resources.Asset[]} assets to be included in this package"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__locales": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} locale data, indexed by locale ID"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__translations": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 80,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} translations, indexed by message ID"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__classnames": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String[]} array of class names loaded by this package"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__javascriptMetas": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{AbstractJavascriptMeta[]} array of Javascript sources loaded by this package"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__javascript": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{AbstractJavascriptMeta} the javascript generated by this package"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "isEmpty": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether this package is empty; packages can be added for a number\n of reasons, but sometimes they don't actually end up with anything in them.\n Note that this is used to suppress the generation of an additional <code>package-*.js</code>\n file in the output, and just means that the content of the file should be embedded\n (or ignored) instead of written into that package file; however, there can still\n be script files which need to be loaded by this package (and that is handled by\n the index.js file)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPackageIndex": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the package index</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}",
            "type": "Integer",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAsset": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an asset, expected to be unique</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "asset {qx.tool.compiler.resources.Asset}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAssets": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the array of assets</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.tool.compiler.resources.Asset[]}",
            "type": "qx.tool.compiler.resources.Asset[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addLocale": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds locale data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "localeId {String}"
          },
          {
            "name": "@param",
            "body": "localeData {Object}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLocales": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns locale data, as a map where the key is the locale ID</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addTranslationEntry": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a translation</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "localeId {String} locale ID",
            "paramName": "localeId",
            "description": " locale ID",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "entry {Object} translation",
            "paramName": "entry",
            "description": " translation",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTranslations": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all translations, indexed by Locale ID</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addJavascriptMeta": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a Javascript to be loaded by this package.  You typically need to\n call <code>addClassname</code> also.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jsMeta {AbstractJavascriptMeta}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getJavascriptMetas": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of all Javascripts to be loaded by this package</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{AbstractJavascriptMeta[]}",
            "type": "AbstractJavascriptMeta[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeJavascriptMeta": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a Javascript</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jsMeta {AbstractJavascriptMeta} the javascript to remove",
            "paramName": "jsMeta",
            "description": " the javascript to remove",
            "type": "qx.tool.compiler.targets.meta.AbstractJavascriptMeta"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addClassname": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a classname to the list which is loaded by this package; this does not\n cause the code to be loaded, @see {addJavascriptMeta}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "classname {String}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getClassnames": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of all classnames</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getJavascript": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the AbstractJavascriptMeta for this Package</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{AbstractJavascriptMeta}",
            "type": "qx.tool.compiler.targets.meta.AbstractJavascriptMeta",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "serializeInto": {
      "location": {
        "start": {
          "line": 264,
          "column": 4
        },
        "end": {
          "line": 288,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writes the data into the configuration which is passed to the loader template</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "packages {Object} the <code>qx.$$packages</code> object data",
            "paramName": "packages",
            "description": " the <code>qx.$$packages</code> object data",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyNeedsWriteToDisk": {
      "location": {
        "start": {
          "line": 293,
          "column": 4
        },
        "end": {
          "line": 295,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply for needsWriteToDisk property</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "needsWriteToDisk"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getEmbedAllJavascript": {
      "type": "function",
      "name": "getEmbedAllJavascript",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>embedAllJavascript</code>.\n\nFor further details take a look at the property definition: {@link #embedAllJavascript}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for embedAllJavascript"
          }
        ]
      }
    },
    "isEmbedAllJavascript": {
      "type": "function",
      "name": "isEmbedAllJavascript",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>embedAllJavascript</code>.\n\nFor further details take a look at the property definition: {@link #embedAllJavascript}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for embedAllJavascript"
          }
        ]
      }
    },
    "setEmbedAllJavascript": {
      "type": "function",
      "name": "setEmbedAllJavascript",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>embedAllJavascript</code>.\n\nFor further details take a look at the property definition: {@link #embedAllJavascript}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for embedAllJavascript"
          }
        ]
      }
    },
    "resetEmbedAllJavascript": {
      "type": "function",
      "name": "resetEmbedAllJavascript",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>embedAllJavascript</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #embedAllJavascript}."
          }
        ]
      }
    },
    "getNeedsWriteToDisk": {
      "type": "function",
      "name": "getNeedsWriteToDisk",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>needsWriteToDisk</code>.\n\nFor further details take a look at the property definition: {@link #needsWriteToDisk}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for needsWriteToDisk"
          }
        ]
      }
    },
    "isNeedsWriteToDisk": {
      "type": "function",
      "name": "isNeedsWriteToDisk",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>needsWriteToDisk</code>.\n\nFor further details take a look at the property definition: {@link #needsWriteToDisk}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for needsWriteToDisk"
          }
        ]
      }
    },
    "setNeedsWriteToDisk": {
      "type": "function",
      "name": "setNeedsWriteToDisk",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>needsWriteToDisk</code>.\n\nFor further details take a look at the property definition: {@link #needsWriteToDisk}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for needsWriteToDisk"
          }
        ]
      }
    },
    "resetNeedsWriteToDisk": {
      "type": "function",
      "name": "resetNeedsWriteToDisk",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>needsWriteToDisk</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #needsWriteToDisk}."
          }
        ]
      }
    }
  },
  "descendants": []
}