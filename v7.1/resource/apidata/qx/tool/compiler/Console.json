{
  "className": "qx.tool.compiler.Console",
  "packageName": "qx.tool.compiler",
  "name": "Console",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 420,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The Console handles output of compiler messages for the end user (i.e. not debugging output).\n The output is based around message IDs, which relate to translatable strings, plus arguments.</p>"
        }
      ]
    }
  },
  "type": "class",
  "properties": {
    "verbose": {
      "location": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 35,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether verbose logging is enabled</p>"
          }
        ]
      },
      "name": "verbose",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "machineReadable": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 41,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to output all messages as machine readable data structures</p>"
          }
        ]
      },
      "name": "machineReadable",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "writer": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function that is used to output console messages; called with:\n   str {String} complete message to output\n   msgId {String} original message ID\n   …args {Object…} original arguments to message</p>"
          }
        ]
      },
      "name": "writer",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "colorOn": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Colour prefix for console output</p>"
          }
        ]
      },
      "name": "colorOn",
      "propertyType": "new",
      "nullable": false,
      "init": "",
      "allowNull": false,
      "check": "String",
      "defaultValue": ""
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "print": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prints the message</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msgId {String} translatable message ID",
            "paramName": "msgId",
            "description": " translatable message ID",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object...} arguments",
            "paramName": "args",
            "description": " arguments",
            "type": "Object..."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "decode": {
      "location": {
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decodes the message ID and arguments into a string to be presented in the output</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msgId {String} translatable message ID",
            "paramName": "msgId",
            "description": " translatable message ID",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object...} arguments",
            "paramName": "args",
            "description": " arguments",
            "type": "Object..."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} complete message",
            "type": "String",
            "description": " complete message"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMessageType": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the type of the message, eg error, warning, etc</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msgId {String} the message ID to lookup",
            "paramName": "msgId",
            "description": " the message ID to lookup",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the type of message, can be one of \"message\" (default) or \"error\", \"warning\"",
            "type": "String",
            "description": " the type of message, can be one of \"message\" (default) or \"error\", \"warning\""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "log": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.log equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.debug equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "info": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 142,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.info equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "trace": {
      "location": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.warn equivalent, with colorization, only operates if <code>verbose</code> is true</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "warn": {
      "location": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.warn equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "error": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.error equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getVerbose": {
      "type": "function",
      "name": "getVerbose",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>verbose</code>.\n\nFor further details take a look at the property definition: {@link #verbose}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for verbose"
          }
        ]
      }
    },
    "isVerbose": {
      "type": "function",
      "name": "isVerbose",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>verbose</code>.\n\nFor further details take a look at the property definition: {@link #verbose}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for verbose"
          }
        ]
      }
    },
    "setVerbose": {
      "type": "function",
      "name": "setVerbose",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>verbose</code>.\n\nFor further details take a look at the property definition: {@link #verbose}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for verbose"
          }
        ]
      }
    },
    "resetVerbose": {
      "type": "function",
      "name": "resetVerbose",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>verbose</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #verbose}."
          }
        ]
      }
    },
    "getMachineReadable": {
      "type": "function",
      "name": "getMachineReadable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>machineReadable</code>.\n\nFor further details take a look at the property definition: {@link #machineReadable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for machineReadable"
          }
        ]
      }
    },
    "isMachineReadable": {
      "type": "function",
      "name": "isMachineReadable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>machineReadable</code>.\n\nFor further details take a look at the property definition: {@link #machineReadable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for machineReadable"
          }
        ]
      }
    },
    "setMachineReadable": {
      "type": "function",
      "name": "setMachineReadable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>machineReadable</code>.\n\nFor further details take a look at the property definition: {@link #machineReadable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for machineReadable"
          }
        ]
      }
    },
    "resetMachineReadable": {
      "type": "function",
      "name": "resetMachineReadable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>machineReadable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #machineReadable}."
          }
        ]
      }
    },
    "getWriter": {
      "type": "function",
      "name": "getWriter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>writer</code>.\n\nFor further details take a look at the property definition: {@link #writer}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for writer"
          }
        ]
      }
    },
    "setWriter": {
      "type": "function",
      "name": "setWriter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>writer</code>.\n\nFor further details take a look at the property definition: {@link #writer}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for writer"
          }
        ]
      }
    },
    "resetWriter": {
      "type": "function",
      "name": "resetWriter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>writer</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #writer}."
          }
        ]
      }
    },
    "getColorOn": {
      "type": "function",
      "name": "getColorOn",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>colorOn</code>.\n\nFor further details take a look at the property definition: {@link #colorOn}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for colorOn"
          }
        ]
      }
    },
    "setColorOn": {
      "type": "function",
      "name": "setColorOn",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>colorOn</code>.\n\nFor further details take a look at the property definition: {@link #colorOn}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for colorOn"
          }
        ]
      }
    },
    "resetColorOn": {
      "type": "function",
      "name": "resetColorOn",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>colorOn</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #colorOn}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 168,
        "column": 2
      },
      "end": {
        "line": 273,
        "column": 3
      }
    }
  },
  "statics": {
    "__INSTANCE": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getInstance": {
      "location": {
        "start": {
          "line": 281,
          "column": 4
        },
        "end": {
          "line": 286,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the singleton instance</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "print": {
      "location": {
        "start": {
          "line": 293,
          "column": 4
        },
        "end": {
          "line": 295,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prints the message</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Object...} arguments",
            "paramName": "args",
            "description": " arguments",
            "type": "Object..."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "decode": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decodes the message ID and arguments into a string to be presented in the output</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Object...} arguments",
            "paramName": "args",
            "description": " arguments",
            "type": "Object..."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} complete message",
            "type": "String",
            "description": " complete message"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "log": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 312,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.log equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 317,
          "column": 4
        },
        "end": {
          "line": 319,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.debug equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "info": {
      "location": {
        "start": {
          "line": 324,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.info equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "warn": {
      "location": {
        "start": {
          "line": 331,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.warn equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trace": {
      "location": {
        "start": {
          "line": 338,
          "column": 4
        },
        "end": {
          "line": 340,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.warn equivalent, with colorization, only operates if <code>verbose</code> is true</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "error": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 347,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>console.error equivalent, with colorization</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "MESSAGE_IDS": {
      "location": {
        "start": {
          "line": 355,
          "column": 4
        },
        "end": {
          "line": 355,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message strings for markers, ie errors and warnings.  The strings are stored as statics\n here, but that's because the CLI is currently assembled by hand and therefore does not\n support translations.  When the CLI is itself compiled by <code>qx compile</code>, these strings\n will move into translation files.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "addMessageIds": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 372,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds message IDs; this is a method because it allows other components (eg qxoodoo-cli) to\n use it</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} map of id strings to message text",
            "paramName": "obj",
            "description": " map of id strings to message text",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String?} the type of message, can be one of \"message\" (default) or \"error\", \"warning\"",
            "paramName": "type",
            "description": " the type of message, can be one of \"message\" (default) or \"error\", \"warning\"",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "decodeMarker": {
      "location": {
        "start": {
          "line": 388,
          "column": 4
        },
        "end": {
          "line": 418,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decodes a marker into a String description</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "marker {Map} containing:\n    msgId {String}\n    start {Map} containing:\n        line {Integer}\n        column? {Integer}\n    end? {Map} containing:\n        line {Integer}\n        column? {Integer}\n    args? {Object[]}",
            "paramName": "marker",
            "description": " containing:\n    msgId {String}\n    start {Map} containing:\n        line {Integer}\n        column? {Integer}\n    end? {Map} containing:\n        line {Integer}\n        column? {Integer}\n    args? {Object[]}",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "showPosition {Boolean?} whether to include line/column info (default is true)",
            "paramName": "showPosition",
            "description": " whether to include line/column info (default is true)",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}