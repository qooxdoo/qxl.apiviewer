{
  "className": "qx.tool.utils.Utils",
  "packageName": "qx.tool.utils",
  "name": "Utils",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 28,
        "column": 0
      },
      "end": {
        "line": 603,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Utility methods</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "newExternalPromise": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a Promise which can be resolved/rejected externally - it has\n the resolve/reject methods as properties</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise} a promise",
            "type": "Promise",
            "description": " a promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "promisifyThis": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "UserError": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Error that can be thrown to indicate wrong user input  and which doesn't\n need a stack trace</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} message"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Error}",
            "type": "Error",
            "description": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "formatTime": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats the time in a human readable format, eg \"1h 23m 45.678s\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} millisec"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} formatted string",
            "type": "string",
            "description": " formatted string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mkpath": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a dir</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dir",
            "paramName": "dir",
            "type": ""
          },
          {
            "name": "@param",
            "body": "cb",
            "paramName": "cb",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mkParentPath": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the parent directory of a filename, if it does not already exist</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "makeParentDir": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 187,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the parent directory of a filename, if it does not already exist</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} filename the filename to create the parent directory of",
            "paramName": "filename",
            "description": "the filename to create the parent directory of",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise?} the value",
            "type": "Promise?",
            "description": " the value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "makeDirs": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a directory, if it does not exist, including all intermediate paths</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} filename the directory to create",
            "paramName": "filename",
            "description": "the directory to create",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise?} the value",
            "type": "Promise?",
            "description": " the value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "LineCountingTransform": {
      "location": {
        "start": {
          "line": 204,
          "column": 4
        },
        "end": {
          "line": 204,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that keeps track of what the current line number is</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "StripSourceMapTransform": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that strips out sourceMappingURL comments</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ToStringWriteStream": {
      "location": {
        "start": {
          "line": 215,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that keeps track of what's been written and can return\n a copy as a string</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "isPlainObject": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "runCommand": {
      "location": {
        "start": {
          "line": 253,
          "column": 4
        },
        "end": {
          "line": 321,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Runs the given command and returns an object containing information on the\n <code>exitCode</code>, the <code>output</code>, potential <code>error</code>s, and additional <code>messages</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cwd The current working directory",
            "paramName": "cwd",
            "description": "The current working directory",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "{String} args One or more command line arguments, including the\n command itself",
            "paramName": "args",
            "description": "One or more command line arguments, including the\n command itself",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{exitCode: Number, output: String, error: *, messages: *}}",
            "type": "{exitCode: Number, output: String, error: *, messages: *",
            "description": "}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "run": {
      "location": {
        "start": {
          "line": 331,
          "column": 4
        },
        "end": {
          "line": 354,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Awaitable wrapper around child_process.spawn.\n Runs a command in a separate process. The output of the command\n is ignored. Throws when the exit code is not 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd Name of the command",
            "paramName": "cmd",
            "description": "Name of the command",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "{Array} args Array of arguments to the command",
            "paramName": "args",
            "description": "Array of arguments to the command",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<Number>} A promise that resolves with the exit code",
            "type": "Promise<Number>",
            "description": " A promise that resolves with the exit code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exec": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 374,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Awaitable wrapper around child_process.exec\n Executes a command and return its result wrapped in a Promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cmd {String} Command with all parameters",
            "paramName": "cmd",
            "description": " Command with all parameters",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<String>} Promise that resolves with the result",
            "type": "Promise<String>",
            "description": " Promise that resolves with the result"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "parseCommand": {
      "location": {
        "start": {
          "line": 382,
          "column": 4
        },
        "end": {
          "line": 422,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses a command line and separates them out into an array that can be given to <code>child_process.spawn</code> etc</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "quoteCommand": {
      "location": {
        "start": {
          "line": 430,
          "column": 4
        },
        "end": {
          "line": 451,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Quotes special characters in the argument array, ensuring that they are safe to pass to the command line</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String[]} cmd"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "formatCommand": {
      "location": {
        "start": {
          "line": 459,
          "column": 4
        },
        "end": {
          "line": 461,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reformats a command line</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "killTree": {
      "location": {
        "start": {
          "line": 468,
          "column": 4
        },
        "end": {
          "line": 490,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Kills a process tree</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Number} parentId parent process ID to kill",
            "paramName": "parentId",
            "description": "parent process ID to kill",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTemplateDir": {
      "location": {
        "start": {
          "line": 496,
          "column": 4
        },
        "end": {
          "line": 503,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the absolute path to the template directory</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isExplicitArg": {
      "location": {
        "start": {
          "line": 513,
          "column": 4
        },
        "end": {
          "line": 518,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the command line explicit set an option (as opposed to yargs\n providing a default value).  Note that this does not handle aliases, use the\n actual, full option name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "option {String} the name of the option, eg \"listen-port\"",
            "paramName": "option",
            "description": " the name of the option, eg \"listen-port\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 521,
        "column": 2
      },
      "end": {
        "line": 602,
        "column": 3
      }
    }
  },
  "members": {
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}