{
  "version": 0.3,
  "lastModified": 1714499371457,
  "lastModifiedIso": "2024-04-30T17:49:31.457Z",
  "classFilename": "../../../../../../../usr/local/lib/node_modules/@qooxdoo/framework/source/class/qxWeb.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 41,
      "column": 0,
      "index": 1338
    },
    "end": {
      "line": 533,
      "column": 3,
      "index": 17680
    }
  },
  "className": "qxWeb",
  "jsdoc": {
    "raw": [
      "*",
      " * The Core module's responsibility is to query the DOM for elements and offer",
      " * these elements as a collection. The Core module itself does not offer any methods to",
      " * work with the collection. These methods are added by the other included modules,",
      " * such as Manipulating or Attributes.",
      " *",
      " * Core also provides the plugin API which allows modules to attach either",
      " * static functions to the global <code>q</code> object or define methods on the",
      " * collection it returns.",
      " *",
      " * By default, the core module is assigned to a global module named <code>q</code>.",
      " * In case <code>q</code> is already defined, the name <code>qxWeb</code>",
      " * is used instead.",
      " *",
      " * For further details, take a look at the documentation in the",
      " * <a href='http://qooxdoo.org/5.0.2/pages/website.html' target='_blank'>user manual</a>.",
      " *",
      " * @ignore(q)",
      " *",
      " * @group (Core)",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The Core module's responsibility is to query the DOM for elements and offer\n these elements as a collection. The Core module itself does not offer any methods to\n work with the collection. These methods are added by the other included modules,\n such as Manipulating or Attributes.\n Core also provides the plugin API which allows modules to attach either\n static functions to the global <code>q</code> object or define methods on the\n collection it returns.\n By default, the core module is assigned to a global module named <code>q</code>.\n In case <code>q</code> is already defined, the name <code>qxWeb</code>\n is used instead.\n For further details, take a look at the documentation in the\n <a href='http://qooxdoo.org/5.0.2/pages/website.html' target='_blank'>user manual</a>.</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "q"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "Core"
      }
    ]
  },
  "superClass": "qx.type.BaseArray",
  "statics": {
    "__init": {
      "jsdoc": {
        "raw": [
          " internal storage for all initializers"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1460
        },
        "end": {
          "line": 45,
          "column": 14,
          "index": 1470
        }
      },
      "appearsIn": []
    },
    "$$qx": {
      "jsdoc": {
        "raw": [
          " internal reference to the used qx namespace"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1528
        },
        "end": {
          "line": 48,
          "column": 12,
          "index": 1536
        }
      },
      "appearsIn": []
    },
    "$init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper to initialize collections.",
          "     *",
          "     * @param arg {var} An array of Elements which will",
          "     *   be initialized as {@link q}. All items in the array which are not",
          "     *   either a window object, a DOM element node or a DOM document node will",
          "     *   be ignored.",
          "     * @param clazz {Class} The class of the new collection.",
          "     * @return {q} A new initialized collection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper to initialize collections.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arg {var} An array of Elements which will\n   be initialized as {@link q}. All items in the array which are not\n   either a window object, a DOM element node or a DOM document node will\n   be ignored.",
            "paramName": "arg",
            "description": " An array of Elements which will\n   be initialized as {@link q}. All items in the array which are not\n   either a window object, a DOM element node or a DOM document node will\n   be ignored.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The class of the new collection.",
            "paramName": "clazz",
            "description": " The class of the new collection.",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new initialized collection.",
            "type": "q",
            "description": "A new initialized collection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1958
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3172
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arg",
          "type": "var"
        },
        {
          "name": "clazz",
          "type": "Class"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    },
    "$attach": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is an API for module development and can be used to attach new methods",
          "     * to {@link q}.",
          "     *",
          "     * @param module {Map} A map containing the methods to attach.",
          "     * @param override {Boolean?false} Force to override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is an API for module development and can be used to attach new methods\n to {@link q}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "module {Map} A map containing the methods to attach.",
            "paramName": "module",
            "description": " A map containing the methods to attach.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "override {Boolean?false} Force to override",
            "paramName": "override",
            "description": " Force to override",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3430
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3866
        }
      },
      "type": "function",
      "params": [
        {
          "name": "module",
          "type": "Map<any, any>"
        },
        {
          "name": "override",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "$attachStatic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is an API for module development and can be used to attach new methods",
          "     * to {@link q}.",
          "     *",
          "     * @param module {Map} A map containing the methods to attach.",
          "     * @param override {Boolean?false} Force to override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is an API for module development and can be used to attach new methods\n to {@link q}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "module {Map} A map containing the methods to attach.",
            "paramName": "module",
            "description": " A map containing the methods to attach.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "override {Boolean?false} Force to override",
            "paramName": "override",
            "description": " Force to override",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4124
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 4494
        }
      },
      "type": "function",
      "params": [
        {
          "name": "module",
          "type": "Map<any, any>"
        },
        {
          "name": "override",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "$attachAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is an API for module development and can be used to attach new methods",
          "     * to {@link q} during runtime according to the following conventions:",
          "     *",
          "     * Public members of the module are attached to the collection similar to",
          "     * <code>qxWeb.$attach</code>. Members beginning with '$' or '_' are ignored.",
          "     *",
          "     * Statics of the module are attached to {@link q} similar to",
          "     * <code>qxWeb.$attachStatic</code>. Statics beginning with '$' or '_', as well as constants",
          "     * (all upper case) and some qooxdoo-internal statics of the module are ignored.",
          "     *",
          "     *",
          "     * If more fine-grained control outside if these conventions is needed,",
          "     * simply use <code>qxWeb.$attach</code> or <code>qxWeb$attachStatic</code>.",
          "     *",
          "     * @param clazz {Object} the qooxdoo class definition calling this method.",
          "     * @param staticsNamespace {String?undefined} Specifies the namespace under which statics are attached to {@link q}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is an API for module development and can be used to attach new methods\n to {@link q} during runtime according to the following conventions:\n Public members of the module are attached to the collection similar to\n <code>qxWeb.$attach</code>. Members beginning with '$' or '<em>' are ignored.\n Statics of the module are attached to {@link q} similar to\n <code>qxWeb.$attachStatic</code>. Statics beginning with '$' or '</em>', as well as constants\n (all upper case) and some qooxdoo-internal statics of the module are ignored.\n If more fine-grained control outside if these conventions is needed,\n simply use <code>qxWeb.$attach</code> or <code>qxWeb$attachStatic</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Object} the qooxdoo class definition calling this method.",
            "paramName": "clazz",
            "description": " the qooxdoo class definition calling this method.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "staticsNamespace {String?undefined} Specifies the namespace under which statics are attached to {@link q}.",
            "paramName": "staticsNamespace",
            "description": " Specifies the namespace under which statics are attached to {@link q}.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 5475
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6333
        }
      },
      "type": "function",
      "params": [
        {
          "name": "clazz",
          "type": "Record<any, any>"
        },
        {
          "name": "staticsNamespace",
          "type": "String",
          "optional": true,
          "defaultValue": "undefined"
        }
      ],
      "appearsIn": []
    },
    "$attachInit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is an API for module development and can be used to attach new initialization",
          "     * methods to {@link q} which will be called when a new collection is",
          "     * created.",
          "     *",
          "     * @param init {Function} The initialization method for a module.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is an API for module development and can be used to attach new initialization\n methods to {@link q} which will be called when a new collection is\n created.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "init {Function} The initialization method for a module.",
            "paramName": "init",
            "description": " The initialization method for a module.",
            "type": "((...args: any[]) => any)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6613
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "init",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "define": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Define a new class using the qooxdoo class system.",
          "     *",
          "     * @param name {String?} Name of the class. If null, the class will not be",
          "     *   attached to a namespace.",
          "     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:",
          "     *     <table>",
          "     *       <thead>",
          "     *         <tr><th>Name</th><th>Type</th><th>Description</th></tr>",
          "     *       </thead>",
          "     *       <tr><td>extend</td><td>Class</td><td>The super class the current class inherits from.</td></tr>",
          "     *       <tr><td>construct</td><td>Function</td><td>The constructor of the class.</td></tr>",
          "     *       <tr><td>statics</td><td>Map</td><td>Map of static values / functions of the class.</td></tr>",
          "     *       <tr><td>members</td><td>Map</td><td>Map of instance members of the class.</td></tr>",
          "     *       <tr><td>defer</td><td>Function</td><td>Function that is called at the end of",
          "     *          processing the class declaration.</td></tr>",
          "     *     </table>",
          "     *",
          "     * <strong>Important hint:</strong> Please do not initialize reference types",
          "     * (<code>Object</code> or <code>Array</code>) directly inside the <strong>members</strong> section.",
          "     * Only list and initialize it with <code>null</code>. Initialize your reference type inside the",
          "     * <code>construct</code>. Check out one of the samples below to get the idea.",
          "     * @return {Function} The defined class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Define a new class using the qooxdoo class system.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String?} Name of the class. If null, the class will not be\n   attached to a namespace.",
            "paramName": "name",
            "description": " Name of the class. If null, the class will not be\n   attached to a namespace.",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map ? null} Class definition structure. The configuration map has the following keys:\n     <table>\n       <thead>\n         <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n       </thead>\n       <tr><td>extend</td><td>Class</td><td>The super class the current class inherits from.</td></tr>\n       <tr><td>construct</td><td>Function</td><td>The constructor of the class.</td></tr>\n       <tr><td>statics</td><td>Map</td><td>Map of static values / functions of the class.</td></tr>\n       <tr><td>members</td><td>Map</td><td>Map of instance members of the class.</td></tr>\n       <tr><td>defer</td><td>Function</td><td>Function that is called at the end of\n          processing the class declaration.</td></tr>\n     </table>\n <strong>Important hint:</strong> Please do not initialize reference types\n (<code>Object</code> or <code>Array</code>) directly inside the <strong>members</strong> section.\n Only list and initialize it with <code>null</code>. Initialize your reference type inside the\n <code>construct</code>. Check out one of the samples below to get the idea.",
            "paramName": "config",
            "description": " Class definition structure. The configuration map has the following keys:\n     <table>\n       <thead>\n         <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n       </thead>\n       <tr><td>extend</td><td>Class</td><td>The super class the current class inherits from.</td></tr>\n       <tr><td>construct</td><td>Function</td><td>The constructor of the class.</td></tr>\n       <tr><td>statics</td><td>Map</td><td>Map of static values / functions of the class.</td></tr>\n       <tr><td>members</td><td>Map</td><td>Map of instance members of the class.</td></tr>\n       <tr><td>defer</td><td>Function</td><td>Function that is called at the end of\n          processing the class declaration.</td></tr>\n     </table>\n <strong>Important hint:</strong> Please do not initialize reference types\n (<code>Object</code> or <code>Array</code>) directly inside the <strong>members</strong> section.\n Only list and initialize it with <code>null</code>. Initialize your reference type inside the\n <code>construct</code>. Check out one of the samples below to get the idea.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The defined class.",
            "type": "((...args: any[]) => any)",
            "description": "The defined class."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 8110
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 8290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "String",
          "optional": true
        },
        {
          "name": "config",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "selector"
      },
      {
        "name": "context"
      }
    ],
    "location": {
      "start": {
        "line": 271,
        "column": 2,
        "index": 9284
      },
      "end": {
        "line": 296,
        "column": 3,
        "index": 9993
      }
    }
  },
  "members": {
    "filter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets a new collection containing only those elements that passed the",
          "     * given filter. This can be either a selector expression or a filter",
          "     * function.",
          "     *",
          "     * @param selector {String|Function} Selector expression or filter function",
          "     * @return {q} New collection containing the elements that passed the filter",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets a new collection containing only those elements that passed the\n given filter. This can be either a selector expression or a filter\n function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selector {String|Function} Selector expression or filter function",
            "paramName": "selector",
            "description": " Selector expression or filter function",
            "type": [
              "String",
              "Function"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} New collection containing the elements that passed the filter",
            "type": "q",
            "description": "New collection containing the elements that passed the filter"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 10364
        },
        "end": {
          "line": 318,
          "column": 5,
          "index": 10673
        }
      },
      "type": "function",
      "params": [
        {
          "name": "selector",
          "type": [
            "String",
            "Function"
          ]
        }
      ],
      "returnType": {
        "type": "q"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "unique": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Recreates a collection which is free of all duplicate elements from the original.",
          "     *",
          "     * @return {q} Returns a copy with no duplicates",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recreates a collection which is free of all duplicate elements from the original.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} Returns a copy with no duplicates",
            "type": "q",
            "description": "Returns a copy with no duplicates"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 325,
          "column": 4,
          "index": 10845
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 10960
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    },
    "slice": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a copy of the collection within the given range.",
          "     *",
          "     * @param begin {Number} The index to begin.",
          "     * @param end {Number?} The index to end.",
          "     * @return {q} A new collection containing a slice of the original collection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a copy of the collection within the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "begin {Number} The index to begin.",
            "paramName": "begin",
            "description": " The index to begin.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "end {Number?} The index to end.",
            "paramName": "end",
            "description": " The index to end.",
            "optional": true,
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing a slice of the original collection.",
            "type": "q",
            "description": "A new collection containing a slice of the original collection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 337,
          "column": 4,
          "index": 11232
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 11660
        }
      },
      "type": "function",
      "params": [
        {
          "name": "begin",
          "type": "number"
        },
        {
          "name": "end",
          "type": "Number",
          "optional": true
        }
      ],
      "returnType": {
        "type": "q"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "splice": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given number of items and returns the removed items as a new collection.",
          "     * This method can also add items. Take a look at the",
          "     * <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice' target='_blank'>documentation of MDN</a> for more details.",
          "     *",
          "     * @param index {Number} The index to begin.",
          "     * @param howMany {Number} the amount of items to remove.",
          "     * @param varargs {var} As many items as you want to add.",
          "     * @return {q} A new collection containing the removed items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given number of items and returns the removed items as a new collection.\n This method can also add items. Take a look at the\n <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice' target='_blank'>documentation of MDN</a> for more details.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index to begin.",
            "paramName": "index",
            "description": " The index to begin.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "howMany {Number} the amount of items to remove.",
            "paramName": "howMany",
            "description": " the amount of items to remove.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "varargs {var} As many items as you want to add.",
            "paramName": "varargs",
            "description": " As many items as you want to add.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing the removed items.",
            "type": "q",
            "description": "A new collection containing the removed items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 12245
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 12399
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "number"
        },
        {
          "name": "howMany",
          "type": "number"
        },
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "map": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a new collection containing the modified elements. For more details, check out the",
          "     * <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map' target='_blank'>MDN documentation</a>.",
          "     *",
          "     * @param callback {Function} Function which produces the new element.",
          "     * @param thisarg {var} Context of the callback.",
          "     * @return {q} New collection containing the elements that passed the filter",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new collection containing the modified elements. For more details, check out the\n <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map' target='_blank'>MDN documentation</a>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function which produces the new element.",
            "paramName": "callback",
            "description": " Function which produces the new element.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "thisarg {var} Context of the callback.",
            "paramName": "thisarg",
            "description": " Context of the callback.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} New collection containing the elements that passed the filter",
            "type": "q",
            "description": "New collection containing the elements that passed the filter"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 377,
          "column": 4,
          "index": 12879
        },
        "end": {
          "line": 379,
          "column": 5,
          "index": 12986
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "thisarg",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "concat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a copy of the collection including the given elements.",
          "     *",
          "     * @param varargs {var} As many items as you want to add.",
          "     * @return {q} A new collection containing all items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a copy of the collection including the given elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many items as you want to add.",
            "paramName": "varargs",
            "description": " As many items as you want to add.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing all items.",
            "type": "q",
            "description": "A new collection containing all items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 387,
          "column": 4,
          "index": 13206
        },
        "end": {
          "line": 397,
          "column": 5,
          "index": 13579
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index of the given element within the current",
          "     * collection or -1 if the element is not in the collection",
          "     * @param elem {Element|Element[]|qxWeb} Element or collection of elements",
          "     * @param fromIndex {Integer} The index to start the search at",
          "     * @return {Number} The element's index",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index of the given element within the current\n collection or -1 if the element is not in the collection</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element|Element[]|qxWeb} Element or collection of elements",
            "paramName": "elem",
            "description": " Element or collection of elements",
            "type": [
              "Element",
              {
                "type": "Element",
                "dimensions": 2
              },
              "qxWeb"
            ]
          },
          {
            "name": "@param",
            "body": "fromIndex {Integer} The index to start the search at",
            "paramName": "fromIndex",
            "description": " The index to start the search at",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The element's index",
            "type": "number",
            "description": "The element's index"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 13921
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 14494
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elem",
          "type": [
            "Element",
            {
              "type": "Element",
              "dimensions": 2
            },
            "qxWeb"
          ]
        },
        {
          "name": "fromIndex",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "overriddenFrom": "qx.type.BaseArray",
      "appearsIn": [
        "qx.type.BaseArray"
      ]
    },
    "debug": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calls the browser's native debugger to easily allow debugging within",
          "     * chained calls.",
          "     *",
          "     * Unlike the <a href=\"#.logThis\">logThis</a> method this implementation blocks the further processing.",
          "     *",
          "     * @return {q} The collection for chaining",
          "     * @ignore(debugger)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calls the browser's native debugger to easily allow debugging within\n chained calls.\n Unlike the <a href=\"#.logThis\">logThis</a> method this implementation blocks the further processing.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "description": "The collection for chaining"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "debugger"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 448,
          "column": 4,
          "index": 14809
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 14969
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    },
    "logThis": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs information about the current collection, its DOM elements and the",
          "     * length. Very useful during development to easily check the current state of",
          "     * your collection and avoid common pitfalls like an empty collection.",
          "     *",
          "     * Unlike the <a href=\"#.debug\">debug</a> method this implementation works non-blocking.",
          "     *",
          "     * @return {q} The collection for chaining",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs information about the current collection, its DOM elements and the\n length. Very useful during development to easily check the current state of\n your collection and avoid common pitfalls like an empty collection.\n Unlike the <a href=\"#.debug\">debug</a> method this implementation works non-blocking.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "description": "The collection for chaining"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 466,
          "column": 4,
          "index": 15390
        },
        "end": {
          "line": 486,
          "column": 5,
          "index": 16059
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    },
    "_forEachElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calls a function for each DOM element  or document fragment in the",
          "     * collection. This is used for DOM manipulations which can't be",
          "     * applied to document nodes or window objects.",
          "     *",
          "     * @param func {Function} Callback function. Will be called with three arguments:",
          "     * The element, the element's index within the collection and the collection itself.",
          "     * @param ctx {Object} The context for the callback function (default: The collection)",
          "     * @return {q} The collection for chaining",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calls a function for each DOM element  or document fragment in the\n collection. This is used for DOM manipulations which can't be\n applied to document nodes or window objects.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Callback function. Will be called with three arguments:\n The element, the element's index within the collection and the collection itself.",
            "paramName": "func",
            "description": " Callback function. Will be called with three arguments:\n The element, the element's index within the collection and the collection itself.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {Object} The context for the callback function (default: The collection)",
            "paramName": "ctx",
            "description": " The context for the callback function (default: The collection)",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "description": "The collection for chaining"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 498,
          "column": 4,
          "index": 16597
        },
        "end": {
          "line": 505,
          "column": 5,
          "index": 16854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "func",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    },
    "_forEachElementWrapped": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calls a function for each DOM element node in the collection. Each node is wrapped",
          "     * in a collection before the function is called.",
          "     *",
          "     * @param func {Function} Callback function. Will be called with three arguments:",
          "     * The element wrappend in a collection, the element's index within the collection and",
          "     * the collection itself.",
          "     * @param ctx {Object} The context for the callback function (default: The collection)",
          "     * @return {q} The collection for chaining",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calls a function for each DOM element node in the collection. Each node is wrapped\n in a collection before the function is called.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Callback function. Will be called with three arguments:\n The element wrappend in a collection, the element's index within the collection and\n the collection itself.",
            "paramName": "func",
            "description": " Callback function. Will be called with three arguments:\n The element wrappend in a collection, the element's index within the collection and\n the collection itself.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {Object} The context for the callback function (default: The collection)",
            "paramName": "ctx",
            "description": " The context for the callback function (default: The collection)",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "description": "The collection for chaining"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 517,
          "column": 4,
          "index": 17373
        },
        "end": {
          "line": 522,
          "column": 5,
          "index": 17554
        }
      },
      "type": "function",
      "params": [
        {
          "name": "func",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "q"
      },
      "appearsIn": []
    }
  },
  "properties": {}
}