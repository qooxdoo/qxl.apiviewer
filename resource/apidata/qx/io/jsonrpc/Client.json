{
  "version": 0.3,
  "lastModified": 1744740896057,
  "lastModifiedIso": "2025-04-15T18:14:56.057Z",
  "classFilename": "../../../../../../../usr/local/lib/node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/Client.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 588
    },
    "end": {
      "line": 411,
      "column": 3,
      "index": 14801
    }
  },
  "className": "qx.io.jsonrpc.Client",
  "jsdoc": {
    "raw": [
      "*",
      " * This class provides a JSON-RPC client object with auto-configuration of the",
      " * transport used (based on the URI passed).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This class provides a JSON-RPC client object with auto-configuration of the\n transport used (based on the URI passed).</p>"
      }
    ]
  },
  "superClass": "qx.io.transport.AbstractClient",
  "statics": {
    "registerTransport": {
      "jsdoc": {
        "raw": [
          " statics are not inherited from parent class"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 741
        },
        "end": {
          "line": 28,
          "column": 71,
          "index": 808
        }
      },
      "appearsIn": [
        "qx.io.transport.AbstractClient"
      ]
    }
  },
  "events": {
    "outgoingRequest": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired before a request message is sent to the server.",
          "     * Event data is the {@link qx.io.jsonrpc.protocol.Message} to",
          "     * be sent. This also allows listeners to configure the transport",
          "     * object beforehand.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired before a request message is sent to the server.\n Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n be sent. This also allows listeners to configure the transport\n object beforehand.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1077
        },
        "end": {
          "line": 38,
          "column": 41,
          "index": 1114
        }
      }
    },
    "error": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when a request results in an error. Event data is an instance of",
          "     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},",
          "     * or {@link qx.io.exception.Cancel}.",
          "     * Event fired when a message is received from the endpoint. Event data",
          "     * is an UTF-8 encoded string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a request results in an error. Event data is an instance of\n {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n or {@link qx.io.exception.Cancel}.\n Event fired when a message is received from the endpoint. Event data\n is an UTF-8 encoded string</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1449
        },
        "end": {
          "line": 47,
          "column": 31,
          "index": 1476
        }
      }
    },
    "incomingRequest": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when a peer-originated JSON-RPC message has been",
          "     * received from the peer endpoint. Event data is an instance of {@link",
          "     * qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}",
          "     * or {@link qx.io.jsonrpc.protocol.Notification}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a peer-originated JSON-RPC message has been\n received from the peer endpoint. Event data is an instance of {@link\n qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n or {@link qx.io.jsonrpc.protocol.Notification}.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1773
        },
        "end": {
          "line": 55,
          "column": 41,
          "index": 1810
        }
      }
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "transportOrUri"
      },
      {
        "name": "methodPrefix"
      },
      {
        "name": "parser"
      }
    ],
    "location": {
      "start": {
        "line": 68,
        "column": 2,
        "index": 2433
      },
      "end": {
        "line": 85,
        "column": 3,
        "index": 2907
      }
    }
  },
  "properties": {
    "methodPrefix": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 3083
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3148
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * An optional string which is prepended to the method name by the {@link #sendRequest}",
          "     * and {@link #sendNotification} methods",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>An optional string which is prepended to the method name by the {@link #sendRequest}\n and {@link #sendNotification} methods</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "parser": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3263
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3323
        }
      },
      "json": {
        "check": "qx.io.jsonrpc.protocol.Parser"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__requests": {
      "jsdoc": {
        "raw": [
          "*",
          "     * A cache of the requests which have been sent out and are still pending",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A cache of the requests which have been sent out and are still pending</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3441
        },
        "end": {
          "line": 109,
          "column": 20,
          "index": 3457
        }
      },
      "appearsIn": []
    },
    "_prependMethodPrefix": {
      "jsdoc": {
        "raw": [
          "*",
          "     * If a service name has been configured, prepend it to the method name,",
          "     * unless it has already been prefixed",
          "     * @param {String} method",
          "     * @return {String}",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If a service name has been configured, prepend it to the method name,\n unless it has already been prefixed</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3670
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3932
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_throwTransportException": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires \"error\" event and rejects the pending requests' promises.",
          "     * The method will be renamed and made private in v8.",
          "     * @param exception",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires \"error\" event and rejects the pending requests' promises.\n The method will be renamed and made private in v8.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "exception",
            "paramName": "exception",
            "type": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4124
        },
        "end": {
          "line": 144,
          "column": 5,
          "index": 4630
        }
      },
      "type": "function",
      "params": [
        {
          "name": "exception"
        }
      ],
      "appearsIn": []
    },
    "send": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given JSON-RPC message object using the configured transport",
          "     *",
          "     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message",
          "     * @return {qx.Promise} Promise that resolves (with no data) when the message has been successfully",
          "     * sent out. As this means different things depending on the transport implementation, it is best",
          "     * not to base any kind of business logic on the fulfillment of that promise.",
          "     *",
          "     * The current behavior is to return the promise from the transport `send()` implementation, which",
          "     * might be rejected with a {@link qx.io.exception.Transport} in case of a transport error.",
          "     * This has caused problems with \"unhandled promise rejection\" errors, so a new behaviour will be",
          "     * the default in v8: The returned promise is already resolved, and any rejection of the transport",
          "     * promise will only be forwarded to the promise(s) of the request(s) contained in the the `message`",
          "     * argument. The returned promise will never be rejected. This behavior can be enabled by setting",
          "     * the environment variable `qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest` to `true` in v7.",
          "     * In v8, the default of `qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest` will become `true`,",
          "     * and that environment variable will become deprecated.",
          "     *",
          "     * In any case, the result of the jsonrpc request is retrieved by awaiting {@link qx.io.jsonrpc.protocol.Request}'s",
          "     * promise, which is resolved with the jsonrpc server's response or is rejected either  with a",
          "     * {@link qx.io.exception.Transport} in case of a transport error or with {@link qx.io.protocol.Error}",
          "     * in case of a jsonrpc error.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given JSON-RPC message object using the configured transport</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message",
            "paramName": "message",
            "description": "",
            "type": [
              "qx.io.jsonrpc.protocol.Message",
              "qx.io.jsonrpc.protocol.Batch"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves (with no data) when the message has been successfully\n sent out. As this means different things depending on the transport implementation, it is best\n not to base any kind of business logic on the fulfillment of that promise.\n The current behavior is to return the promise from the transport <code>send()</code> implementation, which\n might be rejected with a {@link qx.io.exception.Transport} in case of a transport error.\n This has caused problems with \"unhandled promise rejection\" errors, so a new behaviour will be\n the default in v8: The returned promise is already resolved, and any rejection of the transport\n promise will only be forwarded to the promise(s) of the request(s) contained in the the <code>message</code>\n argument. The returned promise will never be rejected. This behavior can be enabled by setting\n the environment variable <code>qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest</code> to <code>true</code> in v7.\n In v8, the default of <code>qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest</code> will become <code>true</code>,\n and that environment variable will become deprecated.\n In any case, the result of the jsonrpc request is retrieved by awaiting {@link qx.io.jsonrpc.protocol.Request}'s\n promise, which is resolved with the jsonrpc server's response or is rejected either  with a\n {@link qx.io.exception.Transport} in case of a transport error or with {@link qx.io.protocol.Error}\n in case of a jsonrpc error.",
            "type": "qx.Promise",
            "description": "Promise that resolves (with no data) when the message has been successfully\n sent out. As this means different things depending on the transport implementation, it is best\n not to base any kind of business logic on the fulfillment of that promise.\n The current behavior is to return the promise from the transport <code>send()</code> implementation, which\n might be rejected with a {@link qx.io.exception.Transport} in case of a transport error.\n This has caused problems with \"unhandled promise rejection\" errors, so a new behaviour will be\n the default in v8: The returned promise is already resolved, and any rejection of the transport\n promise will only be forwarded to the promise(s) of the request(s) contained in the the <code>message</code>\n argument. The returned promise will never be rejected. This behavior can be enabled by setting\n the environment variable <code>qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest</code> to <code>true</code> in v7.\n In v8, the default of <code>qx.io.jsonrpc.forwardTransportPromiseRejectionToRequest</code> will become <code>true</code>,\n and that environment variable will become deprecated.\n In any case, the result of the jsonrpc request is retrieved by awaiting {@link qx.io.jsonrpc.protocol.Request}'s\n promise, which is resolved with the jsonrpc server's response or is rejected either  with a\n {@link qx.io.exception.Transport} in case of a transport error or with {@link qx.io.protocol.Error}\n in case of a jsonrpc error."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 6370
        },
        "end": {
          "line": 233,
          "column": 5,
          "index": 8611
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": [
            "qx.io.jsonrpc.protocol.Message",
            "qx.io.jsonrpc.protocol.Batch"
          ]
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a single JSON-RPC request. If a method prefix name has been configured,",
          "     * it will be prepended to the method name.",
          "     * @param {String} method",
          "     * @param {Array|Object?} params",
          "     * @return {qx.Promise} Promise that resolves with the result to that request,",
          "     * and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC request. If a method prefix name has been configured,\n it will be prepended to the method name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params",
            "paramName": "params",
            "description": "",
            "optional": true,
            "type": [
              "Array",
              "Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.",
            "type": "qx.Promise",
            "description": "Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 9004
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 9322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "params",
          "type": [
            "Array",
            "Object"
          ],
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendNotification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a single JSON-RPC notification. Will use the method prefix",
          "     * @param {String} method",
          "     * @param {Array|Object?} params",
          "     * @return {qx.Promise} Promise that resolves immediately, (i.e. when the",
          "     * notification has been sent out (which is synchronous)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC notification. Will use the method prefix</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params",
            "paramName": "params",
            "description": "",
            "optional": true,
            "type": [
              "Array",
              "Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)",
            "type": "qx.Promise",
            "description": "Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 9623
        },
        "end": {
          "line": 269,
          "column": 5,
          "index": 9842
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "params",
          "type": [
            "Array",
            "Object"
          ],
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendBatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given message batch. Will use the method prefix.",
          "     * @param {qx.io.jsonrpc.protocol.Batch} batch",
          "     * @return {qx.Promise} Promise that resolves with an array of the responses",
          "     * to all requests in the batch, or rejects with any error that occurs.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given message batch. Will use the method prefix.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Batch} batch",
            "paramName": "batch",
            "description": "",
            "type": "qx.io.jsonrpc.protocol.Batch"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs.",
            "type": "qx.Promise",
            "description": "Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 10138
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 10606
        }
      },
      "type": "function",
      "params": [
        {
          "name": "batch",
          "type": "qx.io.jsonrpc.protocol.Batch"
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "handleIncoming": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Receives and handles an incoming JSON-RPC compliant message data",
          "     * @param {String} json JSON data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Receives and handles an incoming JSON-RPC compliant message data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} json JSON data",
            "paramName": "json",
            "description": "JSON data",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 10739
        },
        "end": {
          "line": 315,
          "column": 5,
          "index": 11395
        }
      },
      "type": "function",
      "params": [
        {
          "name": "json",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_cleanup": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clean up after a message has been received",
          "     * @param {qx.io.jsonrpc.protocol.Message} message",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clean up after a message has been received</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message} message",
            "paramName": "message",
            "description": "",
            "type": "qx.io.jsonrpc.protocol.Message"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 11539
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 11589
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": "qx.io.jsonrpc.protocol.Message"
        }
      ],
      "appearsIn": []
    },
    "handleMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handle an incoming message or batch of messages",
          "     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch",
          "     * @throws {qx.io.exception.Transport} For transport-related errors",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle an incoming message or batch of messages</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch",
            "paramName": "message",
            "description": "Message or Batch",
            "type": [
              "qx.io.jsonrpc.protocol.Message",
              "qx.io.jsonrpc.protocol.Batch"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.io.exception.Transport} For transport-related errors",
            "type": "qx.io.exception.Transport",
            "description": " For transport-related errors"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 11840
        },
        "end": {
          "line": 393,
          "column": 5,
          "index": 14230
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": [
            "qx.io.jsonrpc.protocol.Message",
            "qx.io.jsonrpc.protocol.Batch"
          ]
        }
      ],
      "appearsIn": []
    }
  }
}