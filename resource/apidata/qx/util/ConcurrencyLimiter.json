{
  "version": 0.3,
  "lastModified": 1744740938274,
  "lastModifiedIso": "2025-04-15T18:15:38.274Z",
  "classFilename": "../../../../../../../usr/local/lib/node_modules/@qooxdoo/framework/source/class/qx/util/ConcurrencyLimiter.js",
  "type": "class",
  "location": {
    "start": {
      "line": 10,
      "column": 0,
      "index": 376
    },
    "end": {
      "line": 78,
      "column": 3,
      "index": 2094
    }
  },
  "className": "qx.util.ConcurrencyLimiter",
  "jsdoc": {
    "raw": [
      "*",
      " * Utility class to limit the number of concurrent executions of async functions.",
      " *",
      " * @typedef {Object} TaskEntry",
      " * @template T",
      " * @property {() => Promise<T>} task The function to execute.",
      " * @property {(value: T) => void} resolve The function to call when the task resolves.",
      " * @property {(reason: any) => void} reject The function to call when the task rejects.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Utility class to limit the number of concurrent executions of async functions.</p>"
      }
    ],
    "@typedef": [
      {
        "name": "@typedef",
        "body": "{Object} TaskEntry"
      }
    ],
    "@template": [
      {
        "name": "@template",
        "body": "T"
      }
    ],
    "@property": [
      {
        "name": "@property",
        "body": "{() => Promise<T>} task The function to execute."
      },
      {
        "name": "@property",
        "body": "{(value: T) => void} resolve The function to call when the task resolves."
      },
      {
        "name": "@property",
        "body": "{(reason: any) => void} reject The function to call when the task rejects."
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "limit"
      }
    ],
    "location": {
      "start": {
        "line": 16,
        "column": 2,
        "index": 580
      },
      "end": {
        "line": 22,
        "column": 3,
        "index": 700
      }
    }
  },
  "members": {
    "__queue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {TaskEntry<*>[]}",
          "     * The tasks that are waiting to be executed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{TaskEntry<*>[]}\n The tasks that are waiting to be executed"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 815
        },
        "end": {
          "line": 29,
          "column": 17,
          "index": 828
        }
      },
      "appearsIn": []
    },
    "__running": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Number of currently running tasks.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of currently running tasks.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 34,
          "column": 4,
          "index": 893
        },
        "end": {
          "line": 34,
          "column": 19,
          "index": 908
        }
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Queues a function to be executed.",
          "     * If the limit is reached, the function will be put on hold until a slot is available.",
          "     *",
          "     * @template T",
          "     * @param {() => Promise<T>} task The function to execute.",
          "     * @returns {Promise<T>} The promise that will be resolved when the function is executed.",
          "     *  If the function rejects, the promise will also reject.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Queues a function to be executed.\n If the limit is reached, the function will be put on hold until a slot is available.</p>"
          }
        ],
        "@template": [
          {
            "name": "@template",
            "body": "T"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{() => Promise<T>} task The function to execute.",
            "paramName": "task",
            "description": "The function to execute.",
            "type": "() => Promise<T>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<T>} The promise that will be resolved when the function is executed.\n  If the function rejects, the promise will also reject.",
            "type": "Promise<T>",
            "description": "The promise that will be resolved when the function is executed.\n  If the function rejects, the promise will also reject."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1310
        },
        "end": {
          "line": 50,
          "column": 5,
          "index": 1468
        }
      },
      "type": "function",
      "params": [
        {
          "name": "task",
          "type": "() => Promise<T>"
        }
      ],
      "returnType": {
        "type": "Promise<T>"
      },
      "appearsIn": []
    },
    "__checkQueue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks the queue to see if anything can be executed,",
          "     * and executes the next item in the queue if the limit is not reached.",
          "     * Once the item has finished executing, it will check the queue again.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks the queue to see if anything can be executed,\n and executes the next item in the queue if the limit is not reached.\n Once the item has finished executing, it will check the queue again.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1703
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2086
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}