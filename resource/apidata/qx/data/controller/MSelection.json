{
  "version": 0.3,
  "lastModified": 1747389933080,
  "lastModifiedIso": "2025-05-16T10:05:33.080Z",
  "classFilename": "../../../../../../../usr/local/lib/node_modules/@qooxdoo/framework/source/class/qx/data/controller/MSelection.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 873
    },
    "end": {
      "line": 462,
      "column": 3,
      "index": 15598
    }
  },
  "className": "qx.data.controller.MSelection",
  "jsdoc": {
    "raw": [
      "*",
      " * Mixin for the selection in the data binding controller.",
      " * It contains an selection property which can be manipulated.",
      " * Remember to call the method {@link #_addChangeTargetListener} on every",
      " * change of the target.",
      " * It is also important that the elements stored in the target e.g. ListItems",
      " * do have the corresponding model stored as user data under the \"model\" key.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Mixin for the selection in the data binding controller.\n It contains an selection property which can be manipulated.\n Remember to call the method {@link #_addChangeTargetListener} on every\n change of the target.\n It is also important that the elements stored in the target e.g. ListItems\n do have the corresponding model stored as user data under the \"model\" key.</p>"
      }
    ]
  },
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 34,
        "column": 2,
        "index": 1114
      },
      "end": {
        "line": 45,
        "column": 3,
        "index": 1467
      }
    }
  },
  "properties": {
    "selection": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1905
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 2034
        }
      },
      "json": {
        "check": "qx.data.Array",
        "event": "changeSelection",
        "apply": "_applySelection"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Data array containing the selected model objects. This property can be",
          "     * manipulated directly which means that a push to the selection will also",
          "     * select the corresponding element in the target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data array containing the selected model objects. This property can be\n manipulated directly which means that a push to the selection will also\n select the corresponding element in the target.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowSelectionNotInModel": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2768
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2866
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "nullable": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If set to true, the selection property will be allowed to have items which are not in the model property.",
          "     * If the model property changes, this will not cause the selection property to be reset.",
          "     *",
          "     * If the selection property contains items which are not in the model property,",
          "     * the selection of the target widget (e.g. qx.ui.form.SelectBox) will only be the items that are both in this controller's model property",
          "     * and in this controller's selection property.",
          "     *",
          "     * This is useful when it is undesirable to reset the selection when the model changes,",
          "     * because if the selection is bound to a business object,",
          "     * data in the business object may be overwritten.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If set to true, the selection property will be allowed to have items which are not in the model property.\n If the model property changes, this will not cause the selection property to be reset.\n If the selection property contains items which are not in the model property,\n the selection of the target widget (e.g. qx.ui.form.SelectBox) will only be the items that are both in this controller's model property\n and in this controller's selection property.\n This is useful when it is undesirable to reset the selection when the model changes,\n because if the selection is bound to a business object,\n data in the business object may be overwritten.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "events": {
    "changeSelection": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event is fired as soon as the content of the selection property changes, but",
          "     * this is not equal to the change of the selection of the widget. If the selection",
          "     * of the widget changes, the content of the array stored in the selection property",
          "     * changes. This means you have to listen to the change event of the selection array",
          "     * to get an event as soon as the user changes the selected item.",
          "     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired as soon as the content of the selection property changes, but\n this is not equal to the change of the selection of the widget. If the selection\n of the widget changes, the content of the array stored in the selection property\n changes. This means you have to listen to the change event of the selection array\n to get an event as soon as the user changes the selected item.\n </p>\n<pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 3424
        },
        "end": {
          "line": 94,
          "column": 41,
          "index": 3461
        }
      }
    },
    "changeValue": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "* Fires after the value was modified "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires after the value was modified</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 3514
        },
        "end": {
          "line": 97,
          "column": 37,
          "index": 3547
        }
      }
    }
  },
  "members": {
    "_modifingSelection": {
      "jsdoc": {
        "raw": [
          " set the semaphore-like variable for the selection change"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3845
        },
        "end": {
          "line": 109,
          "column": 25,
          "index": 3866
        }
      },
      "appearsIn": []
    },
    "__selectionListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3872
        },
        "end": {
          "line": 110,
          "column": 31,
          "index": 3899
        }
      },
      "appearsIn": []
    },
    "__selectionArrayListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3905
        },
        "end": {
          "line": 111,
          "column": 36,
          "index": 3937
        }
      },
      "appearsIn": []
    },
    "__ownSelection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3943
        },
        "end": {
          "line": 112,
          "column": 24,
          "index": 3963
        }
      },
      "appearsIn": []
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param selection {qx.data.IListData|null} List data to select as value.",
          "     * @return {null} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "description": "The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 4200
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 4371
        }
      },
      "type": "function",
      "params": [
        {
          "name": "selection",
          "type": [
            "qx.data.IListData",
            "null"
          ]
        }
      ],
      "returnType": {
        "type": "null"
      },
      "appearsIn": []
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @return {qx.data.IListData} The current selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": "The current selection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 4535
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 4587
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.IListData"
      },
      "appearsIn": []
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4688
        },
        "end": {
          "line": 144,
          "column": 5,
          "index": 4737
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "syncSelectionWithModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes any items from the selection property that are not in the model property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes any items from the selection property that are not in the model property.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4849
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 5184
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method for setting a new selection array. Only the change listener",
          "     * will be removed from the old array and added to the new.",
          "     *",
          "     * @param value {qx.data.Array} The new data array for the selection.",
          "     * @param old {qx.data.Array|null} The old data array for the selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method for setting a new selection array. Only the change listener\n will be removed from the old array and added to the new.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} The new data array for the selection.",
            "paramName": "value",
            "description": " The new data array for the selection.",
            "type": "qx.data.Array"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old data array for the selection.",
            "paramName": "old",
            "description": " The old data array for the selection.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 5704
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 6276
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "qx.data.Array"
        },
        {
          "name": "old",
          "type": [
            "qx.data.Array",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "__changeSelectionArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the change of the data array holding the selection.",
          "     * If a change is in the selection array, the selection update will be",
          "     * invoked.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the change of the data array holding the selection.\n If a change is in the selection array, the selection update will be\n invoked.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 197,
          "column": 4,
          "index": 6662
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 6725
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_changeTargetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for a change in the target selection.",
          "     * If the selection in the target has changed, the selected model objects",
          "     * will be found and added to the selection array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for a change in the target selection.\n If the selection in the target has changed, the selected model objects\n will be found and added to the selection array.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 206,
          "column": 4,
          "index": 6940
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 8211
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_addChangeTargetListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method which should be called by the classes including this",
          "     * Mixin when the target changes.",
          "     * Removes the 'changeSelection' listener from the old target",
          "     * and add a new one to the new target;",
          "     *",
          "     * @param value {qx.ui.core.Widget|null} The new target.",
          "     * @param old {qx.ui.core.Widget|null} The old target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which should be called by the classes including this\n Mixin when the target changes.\n Removes the 'changeSelection' listener from the old target\n and add a new one to the new target;</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 8774
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 9418
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.ui.core.Widget",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.ui.core.Widget",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_updateSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method for updating the selection. It checks for the case of single or",
          "     * multi selection and after that checks if the selection in the selection",
          "     * array is the same as in the target widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method for updating the selection. It checks for the case of single or\n multi selection and after that checks if the selection in the selection\n array is the same as in the target widget.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 9648
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 12259
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__targetSupportsMultiSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-method returning true, if the target supports multi selection.",
          "     * @return {Boolean} true, if the target supports multi selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports multi selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports multi selection.",
            "type": "boolean",
            "description": "true, if the target supports multi selection."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 12430
        },
        "end": {
          "line": 366,
          "column": 5,
          "index": 12632
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__targetSupportsSingleSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-method returning true, if the target supports single selection.",
          "     * @return {Boolean} true, if the target supports single selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports single selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports single selection.",
            "type": "boolean",
            "description": "true, if the target supports single selection."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 12805
        },
        "end": {
          "line": 378,
          "column": 5,
          "index": 13009
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__selectItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for selecting an item in the target. The item to select",
          "     * is defined by a given model item.",
          "     *",
          "     * @param item {qx.core.Object} A model element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for selecting an item in the target. The item to select\n is defined by a given model item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} A model element.",
            "paramName": "item",
            "description": " A model element.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 13212
        },
        "end": {
          "line": 400,
          "column": 5,
          "index": 13769
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "__getSelectableForModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the list item storing the given model in its model property.",
          "     *",
          "     * @param model {var} The representing model of a selectable.",
          "     * @return {Object|null} List item or <code>null</code> if none was found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list item storing the given model in its model property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "model {var} The representing model of a selectable.",
            "paramName": "model",
            "description": " The representing model of a selectable.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object|null} List item or <code>null</code> if none was found",
            "type": "Object|null",
            "description": "List item or <code>null</code> if none was found"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 408,
          "column": 4,
          "index": 14019
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 14414
        }
      },
      "type": "function",
      "params": [
        {
          "name": "model",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Object|null"
      },
      "appearsIn": []
    },
    "_startSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method signaling that currently the selection of the target is",
          "     * in change. That will block the change of the internal selection.",
          "     * {@link #_endSelectionModification}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that currently the selection of the target is\n in change. That will block the change of the internal selection.\n {@link #_endSelectionModification}</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 14628
        },
        "end": {
          "line": 429,
          "column": 5,
          "index": 14698
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_endSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method signaling that the internal changing of the targets",
          "     * selection is over.",
          "     * {@link #_startSelectionModification}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that the internal changing of the targets\n selection is over.\n {@link #_startSelectionModification}</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 436,
          "column": 4,
          "index": 14864
        },
        "end": {
          "line": 438,
          "column": 5,
          "index": 14969
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_inSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method for checking the state of the selection modification.",
          "     * {@link #_startSelectionModification}",
          "     * {@link #_endSelectionModification}",
          "     * @return {Boolean} <code>true</code> if selection modification is active",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for checking the state of the selection modification.\n {@link #<em>startSelectionModification}\n {@link #</em>endSelectionModification}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if selection modification is active",
            "type": "boolean",
            "description": "<code>true</code> if selection modification is active"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 446,
          "column": 4,
          "index": 15232
        },
        "end": {
          "line": 448,
          "column": 5,
          "index": 15308
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 457,
        "column": 2,
        "index": 15504
      },
      "end": {
        "line": 461,
        "column": 3,
        "index": 15594
      }
    }
  },
  "statics": {}
}