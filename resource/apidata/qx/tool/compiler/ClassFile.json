{
  "className": "qx.tool.compiler.ClassFile",
  "packageName": "qx.tool.compiler",
  "name": "ClassFile",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 183,
        "column": 0,
        "index": 4619
      },
      "end": {
        "line": 3164,
        "column": 3,
        "index": 99176
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A class file is parsed and anaysed into an instance of ClassFile; it is\n connected to the Analyser that found the class so that dependencies can be\n identified.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 194,
        "column": 2,
        "index": 5036
      },
      "end": {
        "line": 249,
        "column": 3,
        "index": 6538
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "analyser {Analyser} the Analyser that found the file",
          "paramName": "analyser",
          "description": " the Analyser that found the file",
          "type": "qx.tool.compiler.Analyser"
        },
        {
          "name": "@param",
          "body": "className {String} the full name of the class",
          "paramName": "className",
          "description": " the full name of the class",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "library {Library} the Library the class belongs to (note that the class name is\n  not always enough to identify the library, eg private source files such as qxWeb.js)",
          "paramName": "library",
          "description": " the Library the class belongs to (note that the class name is\n  not always enough to identify the library, eg private source files such as qxWeb.js)",
          "type": "Library"
        }
      ]
    }
  },
  "members": {
    "__analyser": {
      "location": {
        "start": {
          "line": 252,
          "column": 4,
          "index": 6558
        },
        "end": {
          "line": 252,
          "column": 20,
          "index": 6574
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__className": {
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 6580
        },
        "end": {
          "line": 253,
          "column": 21,
          "index": 6597
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__numClassesDefined": {
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 6603
        },
        "end": {
          "line": 254,
          "column": 26,
          "index": 6625
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__library": {
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 6631
        },
        "end": {
          "line": 255,
          "column": 19,
          "index": 6646
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__requiredClasses": {
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 6652
        },
        "end": {
          "line": 256,
          "column": 27,
          "index": 6675
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__environmentChecks": {
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 6681
        },
        "end": {
          "line": 257,
          "column": 29,
          "index": 6706
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__requiredAssets": {
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 6712
        },
        "end": {
          "line": 258,
          "column": 26,
          "index": 6734
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__translateMessageIds": {
      "location": {
        "start": {
          "line": 259,
          "column": 4,
          "index": 6740
        },
        "end": {
          "line": 259,
          "column": 31,
          "index": 6767
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__scope": {
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 6773
        },
        "end": {
          "line": 260,
          "column": 17,
          "index": 6786
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__inDefer": {
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 6792
        },
        "end": {
          "line": 261,
          "column": 20,
          "index": 6808
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__inConstruct": {
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 6814
        },
        "end": {
          "line": 262,
          "column": 24,
          "index": 6834
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__taskQueue": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 6840
        },
        "end": {
          "line": 263,
          "column": 21,
          "index": 6857
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__taskQueueDrains": {
      "location": {
        "start": {
          "line": 264,
          "column": 4,
          "index": 6863
        },
        "end": {
          "line": 264,
          "column": 27,
          "index": 6886
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__markers": {
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 6892
        },
        "end": {
          "line": 265,
          "column": 19,
          "index": 6907
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__haveMarkersFor": {
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 6913
        },
        "end": {
          "line": 266,
          "column": 26,
          "index": 6935
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__classMeta": {
      "location": {
        "start": {
          "line": 267,
          "column": 4,
          "index": 6941
        },
        "end": {
          "line": 267,
          "column": 21,
          "index": 6958
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__metaStack": {
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 6964
        },
        "end": {
          "line": 268,
          "column": 21,
          "index": 6981
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__metaDefinitions": {
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 6987
        },
        "end": {
          "line": 269,
          "column": 27,
          "index": 7010
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__fatalCompileError": {
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 7016
        },
        "end": {
          "line": 270,
          "column": 30,
          "index": 7042
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__translations": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7048
        },
        "end": {
          "line": 271,
          "column": 24,
          "index": 7068
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dbClassInfo": {
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 7074
        },
        "end": {
          "line": 272,
          "column": 23,
          "index": 7093
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__hasDefer": {
      "location": {
        "start": {
          "line": 273,
          "column": 4,
          "index": 7099
        },
        "end": {
          "line": 273,
          "column": 20,
          "index": 7115
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__definingType": {
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 7121
        },
        "end": {
          "line": 274,
          "column": 24,
          "index": 7141
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sourceFilename": {
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 7147
        },
        "end": {
          "line": 275,
          "column": 26,
          "index": 7169
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__taskQueueDrain": {
      "location": {
        "start": {
          "line": 276,
          "column": 4,
          "index": 7175
        },
        "end": {
          "line": 276,
          "column": 26,
          "index": 7197
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__globalSymbols": {
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 7203
        },
        "end": {
          "line": 277,
          "column": 25,
          "index": 7224
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__privates": {
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 7230
        },
        "end": {
          "line": 278,
          "column": 20,
          "index": 7246
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blockedPrivates": {
      "location": {
        "start": {
          "line": 279,
          "column": 4,
          "index": 7252
        },
        "end": {
          "line": 279,
          "column": 27,
          "index": 7275
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__externals": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 7281
        },
        "end": {
          "line": 280,
          "column": 21,
          "index": 7298
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__commonjsModules": {
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 7304
        },
        "end": {
          "line": 281,
          "column": 27,
          "index": 7327
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_onTaskQueueDrain": {
      "location": {
        "start": {
          "line": 283,
          "column": 4,
          "index": 7334
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 7492
        }
      },
      "type": "function",
      "access": "protected"
    },
    "_waitForTaskQueueDrain": {
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 7499
        },
        "end": {
          "line": 297,
          "column": 5,
          "index": 7655
        }
      },
      "type": "function",
      "access": "protected"
    },
    "_queueTask": {
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 7662
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 7717
        }
      },
      "type": "function",
      "access": "protected"
    },
    "getSourcePath": {
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 7816
        },
        "end": {
          "line": 309,
          "column": 5,
          "index": 7875
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the absolute path to the class file</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOutputPath": {
      "location": {
        "start": {
          "line": 315,
          "column": 4,
          "index": 7975
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 8065
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the path to the rewritten class file</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "load": {
      "location": {
        "start": {
          "line": 325,
          "column": 4,
          "index": 8277
        },
        "end": {
          "line": 481,
          "column": 5,
          "index": 13037
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads the source, transpiles and analyses the code, storing the result in outputPath</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback\n          {Function} callback for when the load is completed",
            "paramName": "callback",
            "description": " callback for when the load is completed",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "writeDbInfo": {
      "location": {
        "start": {
          "line": 488,
          "column": 4,
          "index": 13224
        },
        "end": {
          "line": 499,
          "column": 5,
          "index": 13625
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writes the data for the database; updates the record, which may have been previously\n used (so needs to be zero'd out)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dbClassInfo {Map}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_compileDbClassInfo": {
      "location": {
        "start": {
          "line": 504,
          "column": 4,
          "index": 13728
        },
        "end": {
          "line": 678,
          "column": 5,
          "index": 18935
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compiles the DbInfo POJO to be stored in the database about this class</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getOuterClassMeta": {
      "location": {
        "start": {
          "line": 683,
          "column": 4,
          "index": 18994
        },
        "end": {
          "line": 693,
          "column": 5,
          "index": 19283
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the loaded meta data</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_babelClassPlugins": {
      "location": {
        "start": {
          "line": 698,
          "column": 4,
          "index": 19326
        },
        "end": {
          "line": 2293,
          "column": 5,
          "index": 74794
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Babel plugin</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__pushMeta": {
      "location": {
        "start": {
          "line": 2301,
          "column": 4,
          "index": 75040
        },
        "end": {
          "line": 2317,
          "column": 5,
          "index": 75560
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pushes new meta data onto the stack - each meta represents a class being defined,\n we operate a stack so that we can handle inner classes</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "className {String} name of the class being defined",
            "paramName": "className",
            "description": " name of the class being defined",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__popMeta": {
      "location": {
        "start": {
          "line": 2322,
          "column": 4,
          "index": 75677
        },
        "end": {
          "line": 2338,
          "column": 5,
          "index": 76233
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pops the current meta off the stack, optionally checking that the classname is correct</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "pushScope": {
      "location": {
        "start": {
          "line": 2343,
          "column": 4,
          "index": 76295
        },
        "end": {
          "line": 2352,
          "column": 5,
          "index": 76556
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pushes a new scope on the stack</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "popScope": {
      "location": {
        "start": {
          "line": 2357,
          "column": 4,
          "index": 76614
        },
        "end": {
          "line": 2378,
          "column": 5,
          "index": 77162
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pops a scope from the stack</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLoadScope": {
      "location": {
        "start": {
          "line": 2385,
          "column": 4,
          "index": 77276
        },
        "end": {
          "line": 2387,
          "column": 5,
          "index": 77332
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether the current scope is load-time scope</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasDefer": {
      "location": {
        "start": {
          "line": 2394,
          "column": 4,
          "index": 77439
        },
        "end": {
          "line": 2396,
          "column": 5,
          "index": 77487
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether this class has a defer method</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addDeclaration": {
      "location": {
        "start": {
          "line": 2405,
          "column": 4,
          "index": 77800
        },
        "end": {
          "line": 2417,
          "column": 5,
          "index": 78203
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a variable declaration to the current scope; if the symbol was\n previously \"unresolved\" it is removed from the unresolved list</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} the name of the variabvle being declared",
            "paramName": "name",
            "description": " the name of the variabvle being declared",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "valueName {String} the value to assign to the variable",
            "paramName": "valueName",
            "description": " the value to assign to the variable",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasDeclaration": {
      "location": {
        "start": {
          "line": 2426,
          "column": 4,
          "index": 78397
        },
        "end": {
          "line": 2437,
          "column": 5,
          "index": 78694
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether there is a variable declaration accessible to the current\n scope, ie including parent scope</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addReference": {
      "location": {
        "start": {
          "line": 2444,
          "column": 4,
          "index": 78832
        },
        "end": {
          "line": 2492,
          "column": 5,
          "index": 79991
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a reference to a symbol; unknown symbols are marked as unresolved</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          },
          {
            "name": "@param",
            "body": "loc",
            "paramName": "loc",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "encodePrivate": {
      "location": {
        "start": {
          "line": 2502,
          "column": 4,
          "index": 80411
        },
        "end": {
          "line": 2559,
          "column": 5,
          "index": 82196
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Repeatably encodes a private symbol name, caching the result; ignores non-private symbols</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} symbol name",
            "paramName": "name",
            "description": " symbol name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "isIdentifier {boolean} whether this is usage as an identifier (and not in a string literal)",
            "paramName": "isIdentifier",
            "description": " whether this is usage as an identifier (and not in a string literal)",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "location {Location} the location of the symbol",
            "paramName": "location",
            "description": " the location of the symbol",
            "type": "Location"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the encoded name if private, the original name if not private",
            "type": "String",
            "description": " the encoded name if private, the original name if not private"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deleteReference": {
      "location": {
        "start": {
          "line": 2565,
          "column": 4,
          "index": 82336
        },
        "end": {
          "line": 2573,
          "column": 5,
          "index": 82585
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a reference from scope; this should only really be used after scanning is complete</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addExternal": {
      "location": {
        "start": {
          "line": 2580,
          "column": 4,
          "index": 82726
        },
        "end": {
          "line": 2584,
          "column": 5,
          "index": 82844
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an external resource which needs to be loaded early</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the symbol",
            "paramName": "name",
            "description": " name of the symbol",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addCommonjsModule": {
      "location": {
        "start": {
          "line": 2591,
          "column": 4,
          "index": 82970
        },
        "end": {
          "line": 2597,
          "column": 5,
          "index": 83214
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a CommonJS module to be browserified</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the module",
            "paramName": "name",
            "description": " name of the module",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addIgnore": {
      "location": {
        "start": {
          "line": 2603,
          "column": 4,
          "index": 83314
        },
        "end": {
          "line": 2621,
          "column": 5,
          "index": 83857
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an ignored symbol</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the symbol",
            "paramName": "name",
            "description": " name of the symbol",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isIgnored": {
      "location": {
        "start": {
          "line": 2628,
          "column": 4,
          "index": 84025
        },
        "end": {
          "line": 2644,
          "column": 5,
          "index": 84452
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether a symbol has already been marked as ignore</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} symbol name",
            "paramName": "name",
            "description": " symbol name",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if ignored",
            "type": "Boolean",
            "description": " true if ignored"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeIgnore": {
      "location": {
        "start": {
          "line": 2650,
          "column": 4,
          "index": 84555
        },
        "end": {
          "line": 2657,
          "column": 5,
          "index": 84746
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an ignored symbol</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the symbol",
            "paramName": "name",
            "description": " name of the symbol",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addEnvCheck": {
      "location": {
        "start": {
          "line": 2665,
          "column": 4,
          "index": 84897
        },
        "end": {
          "line": 2713,
          "column": 5,
          "index": 86804
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an environment check made by the class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          },
          {
            "name": "@param",
            "body": "location {Object?} see _requireClass",
            "paramName": "location",
            "description": " see _requireClass",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addMarker": {
      "location": {
        "start": {
          "line": 2722,
          "column": 4,
          "index": 87111
        },
        "end": {
          "line": 2776,
          "column": 5,
          "index": 88532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a marker (eg warning or error)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msgId {String} the marker message ID (@see qx.tool.compiler.Marker)",
            "paramName": "msgId",
            "description": " the marker message ID (@see qx.tool.compiler.Marker)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pos {Object||null} position map; may contain a Map containing\n  {line,column?}, or a Map {start:{line,column}, end: {line,column}}.",
            "paramName": "pos",
            "description": " position map; may contain a Map containing\n  {line,column?}, or a Map {start:{line,column}, end: {line,column}}.",
            "type": [
              "Object",
              "",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_requireClass": {
      "location": {
        "start": {
          "line": 2789,
          "column": 4,
          "index": 89050
        },
        "end": {
          "line": 2876,
          "column": 5,
          "index": 91649
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a required class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} the name of the class",
            "paramName": "name",
            "description": " the name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "opts {Map?} which is:\n  where {\"ignore\"|\"require\"|\"use\"|null} where it's mentioned\n  load {Boolean?} whether it is a load-time dependency or not\n  defer {Boolean?} whether the dependency is in defer or not\n  location {Map?} location of the token that caused the reference",
            "paramName": "opts",
            "description": " which is:\n  where {\"ignore\"|\"require\"|\"use\"|null} where it's mentioned\n  load {Boolean?} whether it is a load-time dependency or not\n  defer {Boolean?} whether the dependency is in defer or not\n  location {Map?} location of the token that caused the reference",
            "optional": true,
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map?} info about the symbol type of the named class, @see {Analyser.getSymbolType}",
            "type": "Map?",
            "description": " info about the symbol type of the named class, @see {Analyser.getSymbolType}"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_requireAsset": {
      "location": {
        "start": {
          "line": 2882,
          "column": 4,
          "index": 91720
        },
        "end": {
          "line": 2889,
          "column": 5,
          "index": 91973
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a required asset</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "path",
            "paramName": "path",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getAssets": {
      "location": {
        "start": {
          "line": 2895,
          "column": 4,
          "index": 92060
        },
        "end": {
          "line": 2897,
          "column": 5,
          "index": 92115
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the assets required by the class</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__findProperty": {
      "location": {
        "start": {
          "line": 2907,
          "column": 4,
          "index": 92299
        },
        "end": {
          "line": 2920,
          "column": 5,
          "index": 92708
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds an object property in a node tree (not a Qooxdoo property, an\n object property)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "props",
            "paramName": "props",
            "type": ""
          },
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getRequiredClasses": {
      "location": {
        "start": {
          "line": 2927,
          "column": 4,
          "index": 92813
        },
        "end": {
          "line": 2929,
          "column": 5,
          "index": 92878
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list of required classes (dependencies)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getUnresolvedSymbols": {
      "location": {
        "start": {
          "line": 2936,
          "column": 4,
          "index": 92968
        },
        "end": {
          "line": 2938,
          "column": 5,
          "index": 93036
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of unresolved symbols</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getClassName": {
      "location": {
        "start": {
          "line": 2944,
          "column": 4,
          "index": 93134
        },
        "end": {
          "line": 2946,
          "column": 5,
          "index": 93187
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the name of the class being compiled</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null}",
            "type": "null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 2949,
        "column": 2,
        "index": 93196
      },
      "end": {
        "line": 2961,
        "column": 3,
        "index": 94139
      }
    }
  },
  "statics": {
    "getNamespace": {
      "location": {
        "start": {
          "line": 2969,
          "column": 4,
          "index": 94313
        },
        "end": {
          "line": 2972,
          "column": 5,
          "index": 94423
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the root namespace from the classname, or null if it cannot be determined</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "className",
            "paramName": "className",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*|null}",
            "type": "*|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "JSX_OPTIONS": {
      "location": {
        "start": {
          "line": 2983,
          "column": 4,
          "index": 94937
        },
        "end": {
          "line": 2986,
          "column": 5,
          "index": 95041
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>These options are passed to Babel for JSX compilation; they can be changed by the CLI etc\n as needed.\n Note that at the moment they use a class that does not exist!  <code>qx.html.Jsx</code> is coming soon\n to a PR near you, but in the mean time you could use the compile.json <code>jsx</code> setting to\n change these to something else, eg <code>{ pragma: \"jsx.dom\", pragmaFrag: \"jsx.Fragment }</code> and\n use https://github.com/alecsgone/jsx-render in your application's code.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "DEFER_SAFE_SYMBOLS": {
      "location": {
        "start": {
          "line": 2991,
          "column": 4,
          "index": 95164
        },
        "end": {
          "line": 2995,
          "column": 5,
          "index": 95265
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Classes which are safe to access from defer methods (in addition to the class being defined)</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "QX_GLOBALS": {
      "location": {
        "start": {
          "line": 3000,
          "column": 4,
          "index": 95332
        },
        "end": {
          "line": 3011,
          "column": 5,
          "index": 95591
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of global symbols to be ignored</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "COMMON_GLOBALS": {
      "location": {
        "start": {
          "line": 3013,
          "column": 4,
          "index": 95598
        },
        "end": {
          "line": 3079,
          "column": 5,
          "index": 96815
        }
      },
      "type": "variable",
      "access": "public"
    },
    "BROWSER_GLOBALS": {
      "location": {
        "start": {
          "line": 3081,
          "column": 4,
          "index": 96822
        },
        "end": {
          "line": 3104,
          "column": 5,
          "index": 97286
        }
      },
      "type": "variable",
      "access": "public"
    },
    "NODE_GLOBALS": {
      "location": {
        "start": {
          "line": 3106,
          "column": 4,
          "index": 97293
        },
        "end": {
          "line": 3114,
          "column": 5,
          "index": 97440
        }
      },
      "type": "variable",
      "access": "public"
    },
    "RHINO_GLOBALS": {
      "location": {
        "start": {
          "line": 3116,
          "column": 4,
          "index": 97447
        },
        "end": {
          "line": 3116,
          "column": 39,
          "index": 97482
        }
      },
      "type": "variable",
      "access": "public"
    },
    "RESERVED_WORDS": {
      "location": {
        "start": {
          "line": 3118,
          "column": 4,
          "index": 97489
        },
        "end": {
          "line": 3118,
          "column": 24,
          "index": 97509
        }
      },
      "type": "variable",
      "access": "public"
    },
    "ENVIRONMENT_CONSTANTS": {
      "location": {
        "start": {
          "line": 3125,
          "column": 4,
          "index": 97854
        },
        "end": {
          "line": 3160,
          "column": 5,
          "index": 99142
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>These are the constants which are answered by Qooxdoo qx.core.Environment; we use out own copy here and\n not the one available in qx.core.Environment._defaults because we need to use the version which is appropriate\n for the version of Qooxdoo being compiled, not the one that this CLI is compiled with</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SYSTEM_CHECKS": {
      "location": {
        "start": {
          "line": 3162,
          "column": 4,
          "index": 99149
        },
        "end": {
          "line": 3162,
          "column": 23,
          "index": 99168
        }
      },
      "type": "variable",
      "access": "public"
    }
  },
  "descendants": []
}