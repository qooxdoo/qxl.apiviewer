{
  "className": "qx.test.io.rest.Resource",
  "packageName": "qx.test.io.rest",
  "name": "Resource",
  "superClass": "qx.dev.unit.TestCase",
  "interfaces": [],
  "mixins": [
    "qx.dev.unit.MRequirements",
    "qx.dev.unit.MMock"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 1037,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@asset": [
        {
          "name": "@asset",
          "body": "qx/test/xmlhttp/*"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "setUp": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 41,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "setUpDoubleRequest": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 62,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "setUpResource": {
      "location": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "tearDown": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 79,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: configure request receives pre-configured but unsent request": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: configure request receives invocation details": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: map action when base URL": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map existing action": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action creates method": {
      "location": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 156,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action throws when existing method": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 170,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action does not throw when existing method is empty": {
      "location": {
        "start": {
          "line": 172,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: dynamically created action forwards arguments": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: dynamically created action returns what invoke returns": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map actions from description": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action from description throws with non-object": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 233,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: map action from description throws with incomplete route": {
      "location": {
        "start": {
          "line": 235,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action generically": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: invoke action": {
      "location": {
        "start": {
          "line": 262,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action returns id of request": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action while other is in progress": {
      "location": {
        "start": {
          "line": 278,
          "column": 4
        },
        "end": {
          "line": 292,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke same action handles multiple requests": {
      "location": {
        "start": {
          "line": 294,
          "column": 4
        },
        "end": {
          "line": 313,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with positional params": {
      "location": {
        "start": {
          "line": 315,
          "column": 4
        },
        "end": {
          "line": 323,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with positional params that evaluate to false": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with non-string params": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 343,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with params and data": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with multiple positional params": {
      "location": {
        "start": {
          "line": 361,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with positional params in query": {
      "location": {
        "start": {
          "line": 371,
          "column": 4
        },
        "end": {
          "line": 379,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with undefined params": {
      "location": {
        "start": {
          "line": 381,
          "column": 4
        },
        "end": {
          "line": 387,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action with null params": {
      "location": {
        "start": {
          "line": 389,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action when content type json": {
      "location": {
        "start": {
          "line": 397,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action when content type json and get": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 429,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action for url with port": {
      "location": {
        "start": {
          "line": 431,
          "column": 4
        },
        "end": {
          "line": 439,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action for relative url": {
      "location": {
        "start": {
          "line": 441,
          "column": 4
        },
        "end": {
          "line": 448,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action for relative url with dots": {
      "location": {
        "start": {
          "line": 450,
          "column": 4
        },
        "end": {
          "line": 457,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action for route with check": {
      "location": {
        "start": {
          "line": 459,
          "column": 4
        },
        "end": {
          "line": 466,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action fills in empty string when missing param and no default": {
      "location": {
        "start": {
          "line": 468,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action fills in default when missing param": {
      "location": {
        "start": {
          "line": 477,
          "column": 4
        },
        "end": {
          "line": 484,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action throws when missing required positional param": {
      "location": {
        "start": {
          "line": 486,
          "column": 4
        },
        "end": {
          "line": 494,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action throws when missing required request param": {
      "location": {
        "start": {
          "line": 496,
          "column": 4
        },
        "end": {
          "line": 504,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action throws when param not match check": {
      "location": {
        "start": {
          "line": 506,
          "column": 4
        },
        "end": {
          "line": 513,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: invoke action ignores invalid check in production": {
      "location": {
        "start": {
          "line": 515,
          "column": 4
        },
        "end": {
          "line": 526,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: abort action": {
      "location": {
        "start": {
          "line": 532,
          "column": 4
        },
        "end": {
          "line": 540,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: abort action when multiple requests": {
      "location": {
        "start": {
          "line": 542,
          "column": 4
        },
        "end": {
          "line": 556,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: abort by action id": {
      "location": {
        "start": {
          "line": 558,
          "column": 4
        },
        "end": {
          "line": 566,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: refresh action": {
      "location": {
        "start": {
          "line": 572,
          "column": 4
        },
        "end": {
          "line": 581,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: refresh action replaying previous params": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll action": {
      "location": {
        "start": {
          "line": 595,
          "column": 4
        },
        "end": {
          "line": 608,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: not poll action when no response received yet": {
      "location": {
        "start": {
          "line": 610,
          "column": 4
        },
        "end": {
          "line": 621,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll action immediately": {
      "location": {
        "start": {
          "line": 623,
          "column": 4
        },
        "end": {
          "line": 629,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll action sets initial params": {
      "location": {
        "start": {
          "line": 631,
          "column": 4
        },
        "end": {
          "line": 639,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll action replaying previous params": {
      "location": {
        "start": {
          "line": 641,
          "column": 4
        },
        "end": {
          "line": 651,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll action repeatedly ends previous timer": {
      "location": {
        "start": {
          "line": 653,
          "column": 4
        },
        "end": {
          "line": 670,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: poll many actions": {
      "location": {
        "start": {
          "line": 672,
          "column": 4
        },
        "end": {
          "line": 696,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: end poll action": {
      "location": {
        "start": {
          "line": 698,
          "column": 4
        },
        "end": {
          "line": 715,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: end poll action does not end polling of other action": {
      "location": {
        "start": {
          "line": 717,
          "column": 4
        },
        "end": {
          "line": 734,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: restart poll action": {
      "location": {
        "start": {
          "line": 736,
          "column": 4
        },
        "end": {
          "line": 752,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: long poll action": {
      "location": {
        "start": {
          "line": 754,
          "column": 4
        },
        "end": {
          "line": 772,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: throttle long poll": {
      "location": {
        "start": {
          "line": 774,
          "column": 4
        },
        "end": {
          "line": 796,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: not throttle long poll when not received within limit": {
      "location": {
        "start": {
          "line": 798,
          "column": 4
        },
        "end": {
          "line": 819,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: not throttle long poll when not received subsequently": {
      "location": {
        "start": {
          "line": 821,
          "column": 4
        },
        "end": {
          "line": 847,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: end long poll action": {
      "location": {
        "start": {
          "line": 849,
          "column": 4
        },
        "end": {
          "line": 867,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: fire actionSuccess": {
      "location": {
        "start": {
          "line": 873,
          "column": 4
        },
        "end": {
          "line": 887,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: fire success": {
      "location": {
        "start": {
          "line": 889,
          "column": 4
        },
        "end": {
          "line": 903,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: fire actionError": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 917,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: fire error": {
      "location": {
        "start": {
          "line": 919,
          "column": 4
        },
        "end": {
          "line": 931,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: dispose requests": {
      "location": {
        "start": {
          "line": 937,
          "column": 4
        },
        "end": {
          "line": 956,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: dispose requests of same action": {
      "location": {
        "start": {
          "line": 958,
          "column": 4
        },
        "end": {
          "line": 977,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: dispose request on loadEnd": {
      "location": {
        "start": {
          "line": 979,
          "column": 4
        },
        "end": {
          "line": 995,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "assertSend": {
      "location": {
        "start": {
          "line": 997,
          "column": 4
        },
        "end": {
          "line": 1006,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "skip": {
      "location": {
        "start": {
          "line": 1008,
          "column": 4
        },
        "end": {
          "line": 1010,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "appearsIn": [
        "qx.dev.unit.TestCase"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "message {String|null} Optional message (reason why the test was skipped)",
            "paramName": "message",
            "description": " Optional message (reason why the test was skipped)",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      }
    },
    "hasDebug": {
      "location": {
        "start": {
          "line": 1012,
          "column": 4
        },
        "end": {
          "line": 1014,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "respond": {
      "location": {
        "start": {
          "line": 1017,
          "column": 4
        },
        "end": {
          "line": 1025,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "respondError": {
      "location": {
        "start": {
          "line": 1028,
          "column": 4
        },
        "end": {
          "line": 1034,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "hasHttp": {
      "type": "function",
      "name": "hasHttp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application has been loaded over HTTP.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if HTTP is currently used",
            "type": "Boolean",
            "description": " <code>true</code> if HTTP is currently used"
          }
        ]
      }
    },
    "hasPhp": {
      "type": "function",
      "name": "hasPhp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the server supports PHP.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if PHP is supported by the backend",
            "type": "Boolean",
            "description": " <code>true</code> if PHP is supported by the backend"
          }
        ]
      }
    },
    "hasGuiApp": {
      "type": "function",
      "name": "hasGuiApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Standalone</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is a standalone (GUI)\n application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is a standalone (GUI)\n application"
          }
        ]
      }
    },
    "hasInlineApp": {
      "type": "function",
      "name": "hasInlineApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Inline</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is an inline application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is an inline application"
          }
        ]
      }
    },
    "hasNativeApp": {
      "type": "function",
      "name": "hasNativeApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Native</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is a native application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is a native application"
          }
        ]
      }
    },
    "hasChrome": {
      "type": "function",
      "name": "hasChrome",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Google Chrome</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Google Chrome",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Google Chrome"
          }
        ]
      }
    },
    "hasFirefox": {
      "type": "function",
      "name": "hasFirefox",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Firefox</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Firefox",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Firefox"
          }
        ]
      }
    },
    "hasGecko": {
      "type": "function",
      "name": "hasGecko",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Gecko engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Mozilla Gecko",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Mozilla Gecko"
          }
        ]
      }
    },
    "hasIe": {
      "type": "function",
      "name": "hasIe",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Internet Explorer</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Internet Explorer",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Internet Explorer"
          }
        ]
      }
    },
    "hasMshtml": {
      "type": "function",
      "name": "hasMshtml",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the MSHTML engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is MSHTML",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is MSHTML"
          }
        ]
      }
    },
    "hasOpera": {
      "type": "function",
      "name": "hasOpera",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Opera engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Opera",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Opera"
          }
        ]
      }
    },
    "hasWebkit": {
      "type": "function",
      "name": "hasWebkit",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Webkit engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Webkit",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Webkit"
          }
        ]
      }
    },
    "hasNoOsx": {
      "type": "function",
      "name": "hasNoOsx",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is NOT running on OS X</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the operating system is NOT OX X",
            "type": "Boolean",
            "description": " <code>true</code> if the operating system is NOT OX X"
          }
        ]
      }
    },
    "hasNoWin7": {
      "type": "function",
      "name": "hasNoWin7",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on Windows 7</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>false</code> if operating system is Windows 7",
            "type": "Boolean",
            "description": " <code>false</code> if operating system is Windows 7"
          }
        ]
      }
    },
    "hasNoWin10": {
      "type": "function",
      "name": "hasNoWin10",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on Windows 10</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>false</code> if operating system is Windows 10",
            "type": "Boolean",
            "description": " <code>false</code> if operating system is Windows 10"
          }
        ]
      }
    },
    "hasNoChromeOnLinux": {
      "type": "function",
      "name": "hasNoChromeOnLinux",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is not running in a Google Chrome browser on Linux</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is not Google Chrome on Linux",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is not Google Chrome on Linux"
          }
        ]
      }
    },
    "hasAsyncFunctions": {
      "type": "function",
      "name": "hasAsyncFunctions",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on a client supporting async functions</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the client supports async functions",
            "type": "Boolean",
            "description": " <code>true</code> if the client supports async functions"
          }
        ]
      }
    },
    "require": {
      "type": "function",
      "name": "require",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Verifies a list of infrastructure requirements by checking for\n corresponding \"has\" methods. If no such method was found,\n {@link qx.core.Environment} will be checked for a key matching the given\n feature name. Note that asynchronous environment checks are not supported!</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.dev.unit.RequirementError} if any requirement check returned\n   <code>false</code>",
            "type": "qx.dev.unit.RequirementError",
            "description": " if any requirement check returned\n   <code>false</code>"
          },
          {
            "name": "@throws",
            "body": "{Error} if no valid check was found for a feature.",
            "type": "Error",
            "description": " if no valid check was found for a feature."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "featureList {String[]} List of infrastructure requirements",
            "paramName": "featureList",
            "description": " List of infrastructure requirements",
            "type": "String[]"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "environmentNonLiteralKey(feature)"
          }
        ]
      }
    },
    "__exposeAssertions": {
      "type": "function",
      "name": "__exposeAssertions",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Expose Sinon.JS assertions. Provides methods such\n as assertCalled(), assertCalledWith().\n (http://sinonjs.org/docs/#assert-expose)\n Does not override existing assertion methods.</p>"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "sinon.assert.expose"
          }
        ]
      }
    },
    "__getSinon": {
      "type": "function",
      "name": "__getSinon",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the Sinon.JS object.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      }
    },
    "spy": {
      "type": "function",
      "name": "spy",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Test spies allow introspection on how a function is used\n throughout the system under test.</p>\n<ul>\n<li>spy()\nCreates an anonymous function that records arguments,\nthis value, exceptions and return values for all calls.</li>\n<li>spy(func)\nSpies on the provided function</li>\n<li>spy(object, \"method\")\nCreates a spy for object.method and replaces the original method\nwith the spy. The spy acts exactly like the original method in all cases.\nThe original method can be restored by calling object.method.restore().\nThe returned spy is the function object which replaced the original method.\nspy === object.method.</li>\n<li>spy.withArgs(arg1[, arg2, …])\nCreates a spy that only records calls when the received arguments matches those\npassed to <code>withArgs</code>.\nA spy has a rich interface to introspect how the wrapped function was used:</li>\n<li>spy.withArgs(arg1[, arg2, …]);</li>\n<li>spy.callCount</li>\n<li>spy.called</li>\n<li>spy.calledOnce</li>\n<li>spy.calledTwice</li>\n<li>spy.calledThrice</li>\n<li>spy.firstCall</li>\n<li>spy.secondCall</li>\n<li>spy.thirdCall</li>\n<li>spy.lastCall</li>\n<li>spy.calledBefore(anotherSpy)</li>\n<li>spy.calledAfter(anotherSpy)</li>\n<li>spy.calledOn(obj)</li>\n<li>spy.alwaysCalledOn(obj)</li>\n<li>spy.calledWith(arg1, arg2, …)</li>\n<li>spy.alwaysCalledWith(arg1, arg2, …)</li>\n<li>spy.calledWithExactly(arg1, arg2, …)</li>\n<li>spy.alwaysCalledWithExactly(arg1, arg2, …)</li>\n<li>spy.calledWithMatch(arg1, arg2, …);</li>\n<li>spy.alwaysCalledWithMatch(arg1, arg2, …);</li>\n<li>spy.calledWithNew();</li>\n<li>spy.neverCalledWith(arg1, arg2, …);</li>\n<li>spy.neverCalledWithMatch(arg1, arg2, …);</li>\n<li>spy.threw()</li>\n<li>spy.threw(\"TypeError\")</li>\n<li>spy.threw(obj)</li>\n<li>spy.alwaysThrew()</li>\n<li>spy.alwaysThrew(\"TypeError\")</li>\n<li>spy.alwaysThrew(obj)</li>\n<li>spy.returned(obj)</li>\n<li>spy.alwaysReturned(obj)</li>\n<li>spy.getCall(n)</li>\n<li>spy.thisValues</li>\n<li>spy.args</li>\n<li>spy.exceptions</li>\n<li>spy.returnValues</li>\n<li>spy.reset()</li>\n<li>spy.printf(\"format string\", [arg1, arg2, …])\nSee http://sinonjs.org/docs/#spies.\nNote: Spies are transparently added to a sandbox. To restore\nthe original function for all spies run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "function_or_object {Function|Object} Spies on the\n   provided function or object.",
            "paramName": "function_or_object",
            "description": " Spies on the\n   provided function or object.",
            "type": [
              "Function",
              "Object"
            ]
          },
          {
            "name": "@param",
            "body": "method {String?null} The method to spy upon if an object was given.",
            "paramName": "method",
            "description": " The method to spy upon if an object was given.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The wrapped function enhanced with properties and methods\n   that allow for introspection. See http://sinonjs.org/docs/#spies.",
            "type": "Function",
            "description": " The wrapped function enhanced with properties and methods\n   that allow for introspection. See http://sinonjs.org/docs/#spies."
          }
        ]
      }
    },
    "stub": {
      "type": "function",
      "name": "stub",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Test stubs are functions (spies) with pre-programmed behavior.</p>\n<ul>\n<li>stub()\nCreates an anonymous stub function</li>\n<li>stub(object, \"method\")\nReplaces object.method with a stub function. The original function\ncan be restored by calling object.method.restore() (or stub.restore()).\nAn exception is thrown if the property is not already a function,\nto help avoid typos when stubbing methods.</li>\n<li>stub(obj)\nStubs all the object's methods.</li>\n<li>stub.withArgs(arg1[, arg2, …])\nStubs the method only for the provided arguments. Can be used to create\na stub that acts differently in response to different arguments.\nA stub has the interface of a spy in addition to methods that allow to define behaviour:</li>\n<li>stub.returns(obj)</li>\n<li>stub.throws()</li>\n<li>stub.throws(\"TypeError\")</li>\n<li>stub.throws(obj)</li>\n<li>stub.callsArg(index)</li>\n<li>stub.callsArg(0)</li>\n<li>stub.callsArgWith(index, arg1, arg2, …)\nSee http://sinonjs.org/docs/#stubs.\nNote: Stubs are transparently added to a sandbox. To restore\nthe original function for all stubs run <code>this.getSandbox().restore()</code>\nin your <code>tearDown()</code> method.</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object?null} Object to stub. Creates an anonymous stub function\n   if not given.",
            "paramName": "object",
            "description": " Object to stub. Creates an anonymous stub function\n   if not given.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "method {String?null} Replaces object.method with a stub function.\n   An exception is thrown if the property is not already a function, to\n   help avoid typos when stubbing methods.",
            "paramName": "method",
            "description": " Replaces object.method with a stub function.\n   An exception is thrown if the property is not already a function, to\n   help avoid typos when stubbing methods.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} A stub. Has the interface of a spy in addition to methods\n   that allow to define behaviour. See http://sinonjs.org/docs/#stubs.",
            "type": "Function",
            "description": " A stub. Has the interface of a spy in addition to methods\n   that allow to define behaviour. See http://sinonjs.org/docs/#stubs."
          }
        ]
      }
    },
    "mock": {
      "type": "function",
      "name": "mock",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mocks are slightly different from spies and stubs in that you mock an\n object, and then set an expectation on one or more of its objects.</p>\n<ul>\n<li>var mock = mock(obj)\nCreates a mock for the provided object. Does not change the object, but\nreturns a mock object to set expectations on the object's methods.</li>\n<li>var expectation = mock.expects(\"method\")\nOverrides obj.method with a mock function and returns an expectation\nobject. Expectations implement both the spy and stub interface plus\nthe methods described below.\nSet expectations with following methods. All methods return the expectation\nitself, meaning expectations can be chained.</li>\n<li>expectation.atLeast(number);</li>\n<li>expectation.atMost(number);</li>\n<li>expectation.never();</li>\n<li>expectation.once();</li>\n<li>expectation.twice();</li>\n<li>expectation.thrice();</li>\n<li>expectation.exactly(number);</li>\n<li>expectation.withArgs(arg1, arg2, …);</li>\n<li>expectation.withExactArgs(arg1, arg2, …);</li>\n<li>expectation.on(obj);</li>\n<li>expectation.verify();\nSee http://sinonjs.org/docs/#mocks.</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} The object to create a mock of.",
            "paramName": "object",
            "description": " The object to create a mock of.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} A mock to set expectations on. See http://sinonjs.org/docs/#mocks.",
            "type": "Function",
            "description": " A mock to set expectations on. See http://sinonjs.org/docs/#mocks."
          }
        ]
      }
    },
    "useFakeXMLHttpRequest": {
      "type": "function",
      "name": "useFakeXMLHttpRequest",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replace the native XMLHttpRequest object in browsers that support it with\n a custom implementation which does not send actual requests.\n Note: The fake XHR is transparently added to a sandbox. To restore\n the original host method run <code>this.getSandbox().restore()</code>\n in your <code>tearDown()</code> method.\n See http://sinonjs.org/docs/#useFakeXMLHttpRequest.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ]
      }
    },
    "getRequests": {
      "type": "function",
      "name": "getRequests",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get requests made with faked XHR or server.\n Each request can be queried for url, method, requestHeaders,\n status and more.\n See http://sinonjs.org/docs/#FakeXMLHttpRequest.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Array of faked requests.",
            "type": "Array",
            "description": " Array of faked requests."
          }
        ]
      }
    },
    "useFakeServer": {
      "type": "function",
      "name": "useFakeServer",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\n API to setup server responses. To setup responses, use the server\n returned by {@link #getServer}.\n See http://sinonjs.org/docs/#server.\n Note: The fake server is transparently added to a sandbox. To restore\n the original host method run <code>this.getSandbox().restore()</code>\n in your <code>tearDown()</code> method.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ]
      }
    },
    "getServer": {
      "type": "function",
      "name": "getServer",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get fake server created by {@link #useFakeServer}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Fake server.",
            "type": "Object",
            "description": " Fake server."
          }
        ]
      }
    },
    "getSandbox": {
      "type": "function",
      "name": "getSandbox",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get sandbox.\n The sandbox holds all stubs and mocks. Run <code>this.getSandbox().restore()</code>\n to restore all mock objects.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\n        Sandbox object.",
            "type": "Object",
            "description": "\n        Sandbox object."
          }
        ]
      }
    },
    "deepStub": {
      "type": "function",
      "name": "deepStub",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a deep copied, API-identical stubbed out clone of the given\n object.\n In contrast to the shallow {@link #stub}, also stubs out properties that\n belong to the prototype chain.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Object to stub deeply.",
            "paramName": "object",
            "description": " Object to stub deeply.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} A stub.",
            "type": "Object",
            "description": " A stub."
          }
        ]
      }
    },
    "shallowStub": {
      "type": "function",
      "name": "shallowStub",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shallowly stub all methods (except excluded) that belong to classes found in inheritance\n chain up to (but including) the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Object to stub shallowly.",
            "paramName": "object",
            "description": " Object to stub shallowly.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "targetClazz {Object} Class which marks the end of the chain.",
            "paramName": "targetClazz",
            "description": " Class which marks the end of the chain.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "propsToExclude {Array} Array with properties which shouldn't be stubbed.",
            "paramName": "propsToExclude",
            "description": " Array with properties which shouldn't be stubbed.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} A stub.",
            "type": "Object",
            "description": " A stub."
          }
        ]
      }
    },
    "injectStub": {
      "type": "function",
      "name": "injectStub",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Changes the given factory (e.g. a constructor) to return a stub. The\n method itself returns this stub.\n By default, the stub returned by the changed factory is the object built\n by the original factory, but deeply stubbed (see {@link #deepStub}).\n Alternatively, a custom stub may be given explicitly that is used instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Namespace to hold factory, e.g. qx.html.",
            "paramName": "object",
            "description": " Namespace to hold factory, e.g. qx.html.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "property {String} Property as string that functions as\n  constructor, e.g. \"Element\".",
            "paramName": "property",
            "description": " Property as string that functions as\n  constructor, e.g. \"Element\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "customStub {Object?} Stub to inject.",
            "paramName": "customStub",
            "description": " Stub to inject.",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Injected stub.",
            "type": "Object",
            "description": " Injected stub."
          }
        ]
      }
    },
    "revealMock": {
      "type": "function",
      "name": "revealMock",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Changes the given factory (e.g. a constructor) to make a mock of the\n object returned. The method itself returns this mock.\n By default, the object returned by the changed factory (that a mock is\n made of) is a deep copied, API-identical clone of the object built by the\n original factory. Alternatively, the object returned can be given\n explicitly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Namespace to hold factory, e.g. qx.html.",
            "paramName": "object",
            "description": " Namespace to hold factory, e.g. qx.html.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "property {String} Property as string that functions as\n  constructor, e.g. \"Element\".",
            "paramName": "property",
            "description": " Property as string that functions as\n  constructor, e.g. \"Element\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "customObject {Object?} Object to inject.",
            "paramName": "customObject",
            "description": " Object to inject.",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Mock of the object built.",
            "type": "Object",
            "description": " Mock of the object built."
          }
        ]
      }
    },
    "__deepClone": {
      "type": "function",
      "name": "__deepClone",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deep clone object by copying properties from prototype.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} Object to prepare (that is, clone).",
            "paramName": "obj",
            "description": " Object to prepare (that is, clone).",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Prepared (deeply cloned) object.",
            "type": "Object",
            "description": " Prepared (deeply cloned) object."
          }
        ]
      }
    },
    "__getOwnProperties": {
      "type": "function",
      "name": "__getOwnProperties",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the object’s own properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Object to analyze.",
            "paramName": "object",
            "description": " Object to analyze.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "targetClazz {Object} Class which marks the end of the chain.",
            "paramName": "targetClazz",
            "description": " Class which marks the end of the chain.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Array of the object’s own properties.",
            "type": "Array",
            "description": " Array of the object’s own properties."
          }
        ]
      }
    },
    "__stubProperty": {
      "type": "function",
      "name": "__stubProperty",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.dev.unit.MMock",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Safely stub property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Object to stub.",
            "paramName": "object",
            "description": " Object to stub.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "prop {String} Property to stub.",
            "paramName": "prop",
            "description": " Property to stub.",
            "type": "String"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTestResult": {
      "type": "function",
      "name": "getTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testResult"
          }
        ]
      }
    },
    "setTestResult": {
      "type": "function",
      "name": "setTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testResult"
          }
        ]
      }
    },
    "resetTestResult": {
      "type": "function",
      "name": "resetTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testResult</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ]
      }
    },
    "getTestFunc": {
      "type": "function",
      "name": "getTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testFunc"
          }
        ]
      }
    },
    "setTestFunc": {
      "type": "function",
      "name": "setTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testFunc"
          }
        ]
      }
    },
    "resetTestFunc": {
      "type": "function",
      "name": "resetTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testFunc</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ]
      }
    }
  },
  "events": {},
  "descendants": []
}