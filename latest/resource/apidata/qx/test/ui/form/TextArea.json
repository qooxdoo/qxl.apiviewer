{
  "className": "qx.test.ui.form.TextArea",
  "packageName": "qx.test.ui.form",
  "name": "TextArea",
  "superClass": "qx.test.ui.LayoutTestCase",
  "interfaces": [],
  "mixins": [
    "qx.dev.unit.MRequirements"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 19,
        "column": 0
      },
      "end": {
        "line": 342,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "type": "class",
  "members": {
    "__textArea": {
      "location": {
        "start": {
          "line": 27,
          "column": 4
        },
        "end": {
          "line": 27,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "setUp": {
      "location": {
        "start": {
          "line": 29,
          "column": 4
        },
        "end": {
          "line": 33,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "appearsIn": [
        "qx.test.ui.LayoutTestCase"
      ]
    },
    "hasNoBuggyIe": {
      "location": {
        "start": {
          "line": 35,
          "column": 4
        },
        "end": {
          "line": 39,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea set value": {
      "location": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: textarea set minimal line-height": {
      "location": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 65,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize grows when input would trigger scrollbar": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize shrinks when removal would hide scrollbar": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 113,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize does not shrink below original height": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize shows scroll-bar when above maxHeight": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize shows scroll-bar when finally above maxHeight": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize hides scroll-bar when finally below maxHeight": {
      "location": {
        "start": {
          "line": 175,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize respects initial value": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 219,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize respects initial wrap": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize shrinks when long line is unwrapped": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 271,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "test: textarea with autoSize grows when long line is wrapped": {
      "location": {
        "start": {
          "line": 273,
          "column": 4
        },
        "end": {
          "line": 315,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "__getLongValue": {
      "location": {
        "start": {
          "line": 317,
          "column": 4
        },
        "end": {
          "line": 323,
          "column": 5
        }
      },
      "type": "function",
      "access": "private"
    },
    "__supportsLiveWrap": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 5
        }
      },
      "type": "function",
      "access": "private"
    },
    "skip": {
      "location": {
        "start": {
          "line": 331,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.dev.unit.TestCase",
      "appearsIn": [
        "qx.dev.unit.TestCase"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "message {String|null} Optional message (reason why the test was skipped)",
            "paramName": "message",
            "description": " Optional message (reason why the test was skipped)",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      }
    },
    "tearDown": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 340,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "appearsIn": [
        "qx.test.ui.LayoutTestCase"
      ]
    },
    "hasHttp": {
      "type": "function",
      "name": "hasHttp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application has been loaded over HTTP.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if HTTP is currently used",
            "type": "Boolean",
            "description": " <code>true</code> if HTTP is currently used"
          }
        ]
      }
    },
    "hasPhp": {
      "type": "function",
      "name": "hasPhp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the server supports PHP.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if PHP is supported by the backend",
            "type": "Boolean",
            "description": " <code>true</code> if PHP is supported by the backend"
          }
        ]
      }
    },
    "hasGuiApp": {
      "type": "function",
      "name": "hasGuiApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Standalone</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is a standalone (GUI)\n application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is a standalone (GUI)\n application"
          }
        ]
      }
    },
    "hasInlineApp": {
      "type": "function",
      "name": "hasInlineApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Inline</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is an inline application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is an inline application"
          }
        ]
      }
    },
    "hasNativeApp": {
      "type": "function",
      "name": "hasNativeApp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application extends qx.application.Native</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the application is a native application",
            "type": "Boolean",
            "description": " <code>true</code> if the application is a native application"
          }
        ]
      }
    },
    "hasChrome": {
      "type": "function",
      "name": "hasChrome",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Google Chrome</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Google Chrome",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Google Chrome"
          }
        ]
      }
    },
    "hasFirefox": {
      "type": "function",
      "name": "hasFirefox",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Firefox</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Firefox",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Firefox"
          }
        ]
      }
    },
    "hasGecko": {
      "type": "function",
      "name": "hasGecko",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Gecko engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Mozilla Gecko",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Mozilla Gecko"
          }
        ]
      }
    },
    "hasIe": {
      "type": "function",
      "name": "hasIe",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in Internet Explorer</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is Internet Explorer",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is Internet Explorer"
          }
        ]
      }
    },
    "hasMshtml": {
      "type": "function",
      "name": "hasMshtml",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the MSHTML engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is MSHTML",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is MSHTML"
          }
        ]
      }
    },
    "hasOpera": {
      "type": "function",
      "name": "hasOpera",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Opera engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Opera",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Opera"
          }
        ]
      }
    },
    "hasWebkit": {
      "type": "function",
      "name": "hasWebkit",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running in a browser using the Webkit engine</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser engine is Webkit",
            "type": "Boolean",
            "description": " <code>true</code> if the browser engine is Webkit"
          }
        ]
      }
    },
    "hasNoOsx": {
      "type": "function",
      "name": "hasNoOsx",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is NOT running on OS X</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the operating system is NOT OX X",
            "type": "Boolean",
            "description": " <code>true</code> if the operating system is NOT OX X"
          }
        ]
      }
    },
    "hasNoWin7": {
      "type": "function",
      "name": "hasNoWin7",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on Windows 7</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>false</code> if operating system is Windows 7",
            "type": "Boolean",
            "description": " <code>false</code> if operating system is Windows 7"
          }
        ]
      }
    },
    "hasNoWin10": {
      "type": "function",
      "name": "hasNoWin10",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on Windows 10</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>false</code> if operating system is Windows 10",
            "type": "Boolean",
            "description": " <code>false</code> if operating system is Windows 10"
          }
        ]
      }
    },
    "hasNoChromeOnLinux": {
      "type": "function",
      "name": "hasNoChromeOnLinux",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is not running in a Google Chrome browser on Linux</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the browser is not Google Chrome on Linux",
            "type": "Boolean",
            "description": " <code>true</code> if the browser is not Google Chrome on Linux"
          }
        ]
      }
    },
    "hasAsyncFunctions": {
      "type": "function",
      "name": "hasAsyncFunctions",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the application is running on a client supporting async functions</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the client supports async functions",
            "type": "Boolean",
            "description": " <code>true</code> if the client supports async functions"
          }
        ]
      }
    },
    "require": {
      "type": "function",
      "name": "require",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.dev.unit.MRequirements",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Verifies a list of infrastructure requirements by checking for\n corresponding \"has\" methods. If no such method was found,\n {@link qx.core.Environment} will be checked for a key matching the given\n feature name. Note that asynchronous environment checks are not supported!</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.dev.unit.RequirementError} if any requirement check returned\n   <code>false</code>",
            "type": "qx.dev.unit.RequirementError",
            "description": " if any requirement check returned\n   <code>false</code>"
          },
          {
            "name": "@throws",
            "body": "{Error} if no valid check was found for a feature.",
            "type": "Error",
            "description": " if no valid check was found for a feature."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "featureList {String[]} List of infrastructure requirements",
            "paramName": "featureList",
            "description": " List of infrastructure requirements",
            "type": "String[]"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "environmentNonLiteralKey(feature)"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTestResult": {
      "type": "function",
      "name": "getTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testResult"
          }
        ]
      }
    },
    "setTestResult": {
      "type": "function",
      "name": "setTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testResult</code>.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testResult"
          }
        ]
      }
    },
    "resetTestResult": {
      "type": "function",
      "name": "resetTestResult",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testResult</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testResult}."
          }
        ]
      }
    },
    "getTestFunc": {
      "type": "function",
      "name": "getTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testFunc"
          }
        ]
      }
    },
    "setTestFunc": {
      "type": "function",
      "name": "setTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testFunc</code>.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testFunc"
          }
        ]
      }
    },
    "resetTestFunc": {
      "type": "function",
      "name": "resetTestFunc",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.test.ui.LayoutTestCase",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testFunc</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testFunc}."
          }
        ]
      }
    }
  },
  "events": {},
  "descendants": []
}